|#| '../test_lib.nest' = test
|#| 'stdfs.nest' = fs

-- Test 'is_dir'
'test_files' @fs.is_dir @test.assert_true
'not_a_directory' @fs.is_dir @test.assert_false
'' @fs.is_dir @test.assert_false
'test_files/encodings' @fs.is_dir @test.assert_true
'test_files/file.txt' @fs.is_dir @test.assert_false

-- Test 'is_file'
'test_fs.nest' @fs.is_file @test.assert_true
'not_a_file' @fs.is_file @test.assert_false
'' @fs.is_file @test.assert_false
'test_files/file.txt' @fs.is_file @test.assert_true
'test_files' @fs.is_file @test.assert_false

-- No tests for 'is_socket', 'is_block_device', 'is_char_device' and 'is_named_pipe'

-- Test 'make_dir'
'dir' @fs.is_dir ? 'dir' @fs.remove_all
'test_files/dir' @fs.is_dir ? 'test_files/dir' @fs.remove_all

'dir' @fs.is_dir @test.assert_false
'dir' @fs.make_dir
'dir' @fs.is_dir @test.assert_true
'dir' @fs.make_dir
'dir' @fs.is_dir @test.assert_true
'test_files/dir' @fs.make_dir
'test_files/dir' @fs.is_dir @test.assert_true
fs.make_dir {'dir/sub1/sub2'} @test.assert_raises_error

-- Test 'make_dirs'
'dir/sub1' @fs.is_dir @test.assert_false
'dir/sub1/sub2' @fs.make_dirs
'dir/sub1' @fs.is_dir @test.assert_true
'dir/sub1/sub2' @fs.is_dir @test.assert_true

-- Test 'remove' on directories
'test_files/dir' @fs.is_dir @test.assert_true
'test_files/dir' @fs.remove
'test_files/dir' @fs.is_dir @test.assert_false
fs.remove {'dir'} @test.assert_raises_error
fs.remove {'not/a/dir'} @test.assert_raises_error

-- Test 'remove_all'
'dir/sub1/sub2' @fs.is_dir @test.assert_true
'dir' @fs.remove_all
'dir' @fs.is_dir @test.assert_false
fs.remove_all {'not/a/dir'} @test.assert_raises_error

-- Test 'exists'
'test_files' @fs.exists @test.assert_true
'test_files/encodings' @fs.exists @test.assert_true
'test_files/file.txt' @fs.exists @test.assert_true
'test_fs.nest' @fs.exists @test.assert_true
'test_fs' @fs.exists @test.assert_false
'not_a_directory' @fs.exists @test.assert_false
'not/a/directory' @fs.exists @test.assert_false

-- Test 'copy'
'test_files/file_copy.txt' @fs.is_file ? 'test_files/file_copy.txt' @fs.remove
'test_files/file_copy.txt' @fs.is_file @test.assert_false
'test_files/file.txt' 'test_files/file_copy.txt' @fs.copy
fs.copy {'test_files/file.txt', 'test_files/file_copy.txt'} @test.assert_raises_error
'test_files/file.txt' 'test_files/file_copy.txt' fs.CPO.skip @fs.copy
'test_files/file.txt' 'test_files/file_copy.txt' fs.CPO.overwrite @fs.copy
'test_files/file.txt' 'test_files/file_copy.txt' fs.CPO.update @fs.copy

-- Test 'remove' on files
'test_files/file_copy.txt' @fs.is_file @test.assert_true
'test_files/file_copy.txt' @fs.remove
'test_files/file_copy.txt' @fs.is_file @test.assert_false

-- Test 'make_dir_symlink', 'is_symlink', 'canonical_path' and 'read_symlink'
'dir_symlink' @fs.exists ? 'dir_symlink' @fs.remove
?? [
    'test_files' 'dir_symlink' @fs.make_dir_symlink
    "'dir_symlink' created." @test.println
] ?! error [
    true = dir_symlink_failed
    "'dir_symlink' creation failed (\(error.name) - \(error.message))" @test.println
]

!dir_symlink_failed ? [
    'dir_symlink' @fs.is_symlink @test.assert_true
    'dir_symlink' @fs.canonical_path @fs.path.normalize = can_path
    'test_files' @fs.absolute_path @fs.path.normalize = abs_path
    can_path abs_path @test.assert_eq
    'dir_symlink' @fs.read_symlink 'test_files' @test.assert_eq
    'dir_symlink' @fs.remove
]

-- Test 'make_file_symlink', 'is_symlink', 'canonical_path' and 'read_symlink'
'file_symlink' @fs.exists ? 'file_symlink' @fs.remove
?? [
    'test_files/file.txt' 'file_symlink' @fs.make_file_symlink
    "'file_symlink' created." @test.println
] ?! error [
    true = file_symlink_failed
    "'file_symlink' creation failed (\(error.name) - \(error.message))" @test.println
]

!file_symlink_failed ? [
    'file_symlink' @fs.is_symlink @test.assert_true
    'file_symlink' @fs.canonical_path @fs.path.normalize = can_path
    'test_files/file.txt' @fs.absolute_path @fs.path.normalize = abs_path
    can_path abs_path @test.assert_eq
    'test_files/file.txt' @fs.path.normalize = normalized_path
    'file_symlink' @fs.read_symlink normalized_path @test.assert_eq
    'file_symlink' @fs.remove
]

-- Test 'make_hard_link' and 'equivalent'
'test_files/file_hl.txt' @fs.is_file ? 'test_files/file_hl.txt' @fs.remove
'test_files/file.txt' 'test_files/file_hl.txt' @fs.make_hard_link
'test_files/file.txt' 'test_files/file_hl.txt' @fs.equivalent @test.assert_true
'test_files/file_hl.txt' @fs.remove

-- Test 'rename'
'test_files/file_copy.txt' @fs.is_file ? 'test_files/file_copy.txt' @fs.remove
'test_files/file_copy2.txt' @fs.is_file ? 'test_files/file_copy2.txt' @fs.remove
'test_files/file.txt' 'test_files/file_copy.txt' @fs.copy
'test_files/file_copy.txt' @fs.is_file @test.assert_true
'test_files/file_copy2.txt' @fs.is_file @test.assert_false
'test_files/file_copy.txt''test_files/file_copy2.txt' @fs.rename
'test_files/file_copy.txt' @fs.is_file @test.assert_false
'test_files/file_copy2.txt' @fs.is_file @test.assert_true
'test_files/file_copy2.txt' @fs.remove

-- Test 'list_dir' and 'list_dirs'
'dir' @fs.is_dir ? 'dir' @fs.remove_all
'dir/sub1/sub2' @fs.make_dirs
'test_files/file.txt' 'dir/file.txt' @fs.copy
'test_files/Ã¹nicodeðŸ˜Š.txt' 'dir/Ã¹nicodeðŸ˜Š.txt' @fs.copy
'test_files/file.txt' 'dir/sub1/file1.txt' @fs.copy
'test_files/file.txt' 'dir/sub1/sub2/file2.txt' @fs.copy

#to_set arr mapping_func [
    {} = map
    mapping_func null == ? (##x => x) = mapping_func
    ... arr := el [null = map.(el @mapping_func)]
    => map
]

{
    'dir/file.txt',
    'dir/Ã¹nicodeðŸ˜Š.txt',
    'dir/sub1'
} fs.path.normalize @to_set = dir_paths
'dir' @fs.list_dir @to_set dir_paths @test.assert_eq
{
    'dir/file.txt',
    'dir/Ã¹nicodeðŸ˜Š.txt',
    'dir/sub1',
    'dir/sub1/file1.txt',
    'dir/sub1/sub2',
    'dir/sub1/sub2/file2.txt'
} fs.path.normalize @to_set = dirs_paths
'dir' @fs.list_dirs @to_set dirs_paths @test.assert_eq
'dir' @fs.remove_all

-- Test 'absolute_path'
'test_files/file.txt' @fs.absolute_path = abs_path
(abs_path.0 '/' ==) (abs_path.1 ':' ==) || @test.assert_true

-- Test 'relative_path'
'/a/c' '/a/b/d' @fs.relative_path @fs.path.normalize ('../../c' @fs.path.normalize) @test.assert_eq
'/a/b' '/a/b/d' @fs.relative_path @fs.path.normalize ('..' @fs.path.normalize) @test.assert_eq

-- Test 'path.join'
'a/b' 'c/d' @fs.path.join @fs.path.normalize ('a/b/c/d' @fs.path.normalize) @test.assert_eq
'a/b/' 'c/d' @fs.path.join @fs.path.normalize ('a/b/c/d' @fs.path.normalize) @test.assert_eq
'a/b' '/c/d' @fs.path.join @fs.path.normalize ('/c/d' @fs.path.normalize) @test.assert_eq
'a/b' 'C:/c/d' @fs.path.join @fs.path.normalize ('C:/c/d' @fs.path.normalize) @test.assert_eq
'a/b' '\\c\\d' @fs.path.join @fs.path.normalize ('/c/d' @fs.path.normalize) @test.assert_eq
'a/b' '\\\\?\\C:/c/d' @fs.path.join @fs.path.normalize ('\\\\?\\C:/c/d' @fs.path.normalize) @test.assert_eq
'a/b' 'C:c/d' @fs.path.join @fs.path.normalize ('C:c/d' @fs.path.normalize) @test.assert_eq

-- Test 'path.normalize'
('a/b/c' @fs.path.normalize) ('a\\b\\c' @fs.path.normalize) @test.assert_eq
('a/b\\c' @fs.path.normalize) ('a\\b/c' @fs.path.normalize) @test.assert_eq
('\\\\?\\a/b\\c' @fs.path.normalize) ('\\\\?\\a\\b/c' @fs.path.normalize) @test.assert_eq
('\\\\?\\a/b\\c' @fs.path.normalize).0 '\\' @test.assert_eq

-- Test 'path.parent'
'dir/subdir/file.txt' @fs.path.parent @fs.path.normalize ('dir/subdir' @fs.path.normalize) @test.assert_eq
'dir/subdir/subdir2'  @fs.path.parent @fs.path.normalize ('dir/subdir' @fs.path.normalize) @test.assert_eq
'dir/subdir/subdir2/' @fs.path.parent @fs.path.normalize ('dir/subdir/subdir2' @fs.path.normalize) @test.assert_eq

-- Test 'path.filename'
'dir/subdir/file.txt' @fs.path.filename 'file.txt' @test.assert_eq
'dir/subdir/subdir2'  @fs.path.filename 'subdir2' @test.assert_eq
'dir/subdir/subdir2/' @fs.path.filename '' @test.assert_eq

-- Test 'path.extension'
'dir/subdir/file.txt' @fs.path.extension '.txt' @test.assert_eq
'dir/subdir/file.tar.gz' @fs.path.extension '.gz' @test.assert_eq
'dir/subdir/file' @fs.path.extension '' @test.assert_eq
'dir/subdir/subdir2' @fs.path.extension '' @test.assert_eq
'dir/subdir/subdir2/' @fs.path.extension '' @test.assert_eq

-- Test 'path.stem'
'dir/subdir/file.txt' @fs.path.stem 'file' @test.assert_eq
'dir/subdir/subdir2'  @fs.path.stem 'subdir2' @test.assert_eq
'dir/subdir/subdir2/' @fs.path.stem '' @test.assert_eq
