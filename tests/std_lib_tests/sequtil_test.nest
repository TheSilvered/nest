|#| '../test_lib.nest' = test
|#| 'stdsequtil.nest' = seq

<{ 1, 3, 4, 5, 6 }> = v

{ 1, 2, 3 } (##n => n 1 +) @seq.map { 2, 3, 4 } @test.assert_eq
v 1 2 @seq.insert_at
v <{ 1, 2, 3, 4, 5, 6 }> @test.assert_eq
v -1 @seq.remove_at
v <{ 1, 2, 3, 4, 5 }> @test.assert_eq
'hceilaloo' 0 9 2 @seq.slice 'hello' @test.assert_eq
'hceilaloo' 1 8 2 @seq.slice 'ciao' @test.assert_eq
<{ 1, 2, 3 }> <{ 4, 5, 6 }> @seq.merge <{ 1, 2, 3, 4, 5, 6 }> @test.assert_eq
?::(<{ 1, 2, 3 }>  { 4, 5, 6 }  @seq.merge) Vector @test.assert_eq
?::( { 1, 2, 3 }   { 4, 5, 6 }  @seq.merge) Array  @test.assert_eq

{ 4, 2, 6, 0, 5, 1, 9, 7, 3, 8 } = a
a @seq.sort { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } @test.assert_eq
v @seq.empty <{ }> @test.assert_eq

{ 0, 1, 2, 3, 4, 5 } (##x => x 3 >=) @seq.filter { 3, 4, 5 } @test.assert_eq
?::(<{ 0 }> (##x => true) @seq.filter) Vector @test.assert_eq

{ 0, 1, 2, 3 } 3 @seq.contains @test.assert_true
<{ 0, 1, 2, 3 }> 4 @seq.contains @test.assert_false

{ 'a': 10 } 'a' @seq.contains @test.assert_true
{ 'a': 10 } 10 @seq.contains @test.assert_false

{ false, false, false } @seq.any @test.assert_false
{ false, false, true  } @seq.any @test.assert_true
{ false, false, true  } @seq.all @test.assert_false
{ true,  true,  true  } @seq.any @test.assert_true

Iter :: 'Hello' @seq.from_iter <{ 'H', 'e', 'l', 'l', 'o' }> @test.assert_eq
