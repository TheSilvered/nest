|#| '../test_lib.nest' = test
|#| 'stdsutil.nest' = su

'Hi!' 10 '_' @su.ljust 'Hi!_______' @test.assert_eq
'Hi!' 10 '_' @su.rjust '_______Hi!' @test.assert_eq

'validName' su.LETTERS @su.is_charset @test.assert_true
'invalid name' su.LETTERS @su.is_charset @test.assert_false

'1word1 2word2' 'word' 'letter' @su.replace_substr '1letter1 2letter2' @test.assert_eq
'1word1 2word2' 'word' 'wor' @su.replace_substr '1wor1 2wor2' @test.assert_eq

'HELLO.:()' @su.is_upper @test.assert_true
'hello.:()' @su.is_lower @test.assert_true
'Hello.:()' @su.is_upper @test.assert_false
'hELLO.:()' @su.is_lower @test.assert_false

'Hello.:()' @su.to_upper 'HELLO.:()' @test.assert_eq
'hELLO.:()' @su.to_lower 'hello.:()' @test.assert_eq

'this is a sentence inside a string' 'a' @su.lfind 8  @test.assert_eq
'this is a sentence inside a string' 'a' @su.rfind 26 @test.assert_eq

'this is a sentence inside a string' 'is' @su.lfind 2 @test.assert_eq
'this is a sentence inside a string' 'is' @su.rfind 5 @test.assert_eq

'hello' @su.is_alpha @test.assert_true
'hell0' @su.is_alpha @test.assert_false
'110' @su.is_digit @test.assert_true
'11o' @su.is_alpha @test.assert_false
'hell0' @su.is_alnum @test.assert_true
'hell0 everybody' @su.is_printable @test.assert_true
'hell0 everybody\n' @su.is_printable @test.assert_false

'hell0 everybody\n' @su.repr "'hell0 everybody\\n'" @test.assert_eq
'hell0 everybody\x10' @su.repr "'hell0 everybody\\x10'" @test.assert_eq
'"' @su.repr "'\"'" @test.assert_eq
"'" @su.repr '"\'"' @test.assert_eq

{ Byte :: 72, Byte :: 105 } @su.bytearray_to_str 'Hi' @test.assert_eq

?::su.DIGITS            Str @test.assert_eq
?::su.LETTERS           Str @test.assert_eq
?::su.UPPERCASE_LETTERS Str @test.assert_eq
?::su.LOWERCASE_LETTERS Str @test.assert_eq
?::su.PUNCTUATION       Str @test.assert_eq
