|#| '../test_lib.nest' = test
|#| 'stdsys.nest' = sys
|#| 'stdio.nest' = io
|#| 'stdsutil.nest' = su

test.log_file io.STDOUT == ? [
    sys.PLATFORM 'windows' == ?
        'echo sys.system: written with echo' @sys.system
    :
        'echo "sys.system: written with echo"' @sys.system
] : [
    test.log_file @io.close

    sys.PLATFORM 'windows' == ?
        'echo sys.system: written with echo>> ..\\test_output.txt' @sys.system
    :
        'echo "sys.system: written with echo" >> ../test_output.txt' @sys.system
    '../test_output.txt' 'a+' @io.open = test.log_file
]

'sys.getenv (appdata): \('APPDATA' @sys.get_env)' @test.println
'sys.getenv (home): \('HOME' @sys.get_env)' @test.println

sys.ENDIANNESS @test.println

'Nst:TESTENV' 'test-value' @sys.set_env
'Nst:TESTENV' @sys.get_env 'test-value' @test.assert_eq
'THISDOESNOTEXIST' @sys.get_env null @test.assert_eq
'Nst:TESTENV' 'new-value' false @sys.set_env
'Nst:TESTENV' @sys.get_env 'test-value' @test.assert_eq
'Nst:TESTENV' 'new-value' true @sys.set_env
'Nst:TESTENV' @sys.get_env 'new-value' @test.assert_eq
'Nst:TESTENV' 'newer-value' @sys.set_env
'Nst:TESTENV' @sys.get_env 'newer-value' @test.assert_eq
'Nst:TESTENV' @sys.del_env
'Nst:TESTENV' @sys.get_env null @test.assert_eq
'Nst:TESTENV' @sys.del_env
'Nst:TESTENV' @sys.get_env null @test.assert_eq
sys.set_env {'Invalid=name', 'hello value'} @test.assert_raises_error
sys.set_env {'Invalid\0name', 'hellovalue'} @test.assert_raises_error
sys.set_env {'validname', 'invalid\0value'} @test.assert_raises_error
sys.get_env {'Invalid\0name'} @test.assert_raises_error
sys.get_env {'Invalid=name'} @test.assert_raises_error
sys.del_env {'Invalid\0name'} @test.assert_raises_error
sys.del_env {'Invalid=name'} @test.assert_raises_error

'Hello' @sys.get_ref_count 2 @test.assert_eq
'sys.get_addr: 0x'(10 @sys.get_addr @su.hex -16 '0' @su.justify) >< @test.println
10 @sys.hash 10 @test.assert_eq
-1 @sys.hash -2 @test.assert_eq
?::sys.VERSION Str @test.assert_eq
