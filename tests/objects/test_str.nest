|#| '../test_lib.nest' = test

'' '' @test.assert_eq
'' '\0' @test.assert_ne
'\0' '' @test.assert_ne
'\0' '\0' @test.assert_eq
'abc' 'abc' @test.assert_eq
'abc' 'Abc' @test.assert_ne
'abc' 'abcd' @test.assert_ne
'abcd' 'abc\0' @test.assert_ne
'Ã Ã¨Ã¬' 'Ã Ã¨Ã¬' @test.assert_eq
'Ã Ã¨Ã¬' '\xe0Ã¨Ã¬' @test.assert_eq
'Ã Ã¨Ã¬' '\xe0\xe8\xec' @test.assert_eq
'\xe0\xe8\xec' '\u00e0\u00e8\u00ec' @test.assert_eq
'Ã \0Ã¨Ã¬' 'Ã Ã¨Ã¬' @test.assert_ne
'Ã \0Ã¨Ã¬' 'Ã Ã¨Ã¬' @test.assert_ne
'cafÃ©' 'cafÃ©' @test.assert_eq
'cafÃ©' 'cafe' @test.assert_ne
'cafÃ©' 'cafÃ¨' @test.assert_ne
'ğŸ˜ŠcafÃ©' 'ğŸ˜ŠcafÃ©' @test.assert_eq
'ğŸ˜ŠğŸ‘‘ğŸ˜’' 'ğŸ˜ŠğŸ‘‘ğŸ˜’' @test.assert_eq
'ğŸ˜ŠğŸ‘‘ğŸ˜’' 'ğŸ˜ŠğŸ‘‘ğŸ˜’\0' @test.assert_ne
'ğŸ˜ŠğŸ‘‘ğŸ˜’' '\U01f60a\U01f451\U01f612' @test.assert_eq
'ğŸ˜ŠğŸ‘‘ğŸ˜’' '\ud83d\ude0a\ud83d\udc51\ud83d\ude12' @test.assert_ne

'abc' 'def' < @test.assert_true
'abc' '\0def' < @test.assert_false
'abc' '\0def' > @test.assert_true
'\0abc' '\0def' < @test.assert_true
'abc' 'abcd' < @test.assert_true
'abcde' 'abcd' > @test.assert_true
'ğŸ˜ŠğŸ‘‘ğŸ˜’' 'ğŸ˜ŠğŸ‘‘ğŸ˜’' < @test.assert_false
'ğŸ˜ŠğŸ‘‘ğŸ˜’' 'ğŸ˜ŠğŸ‘‘ğŸ˜’\0' < @test.assert_true
'Ã \0Ã¨Ã¬' 'Ã Ã¨Ã¬' < @test.assert_true
'Ã \0Ã¨Ã¬' 'Ã Ã¨Ã¬' > @test.assert_false

$'hi!' 3 @test.assert_eq
'hi!'.0 'h' @test.assert_eq
'hi!'.1 'i' @test.assert_eq
'hi!'.2 '!' @test.assert_eq
'hi!'.-1 '!' @test.assert_eq
'hi!'.-2 'i' @test.assert_eq
'hi!'.-3 'h' @test.assert_eq
(## => 'hi!'.3) @test.assert_raises_error
(## => 'hi!'.-4) @test.assert_raises_error

$'Ã Ã¨Ã¬' 3 @test.assert_eq
'Ã Ã¨Ã¬'.0 'Ã ' @test.assert_eq
'Ã Ã¨Ã¬'.1 'Ã¨' @test.assert_eq
'Ã Ã¨Ã¬'.2 'Ã¬' @test.assert_eq
'Ã Ã¨Ã¬'.-1 'Ã¬' @test.assert_eq
'Ã Ã¨Ã¬'.-2 'Ã¨' @test.assert_eq
'Ã Ã¨Ã¬'.-3 'Ã ' @test.assert_eq
(## => 'Ã Ã¨Ã¬'.3) @test.assert_raises_error
(## => 'Ã Ã¨Ã¬'.-4) @test.assert_raises_error

$'ğŸ˜ŠğŸ‘‘ğŸ˜’' 3 @test.assert_eq
'ğŸ˜ŠğŸ‘‘ğŸ˜’'.0 'ğŸ˜Š' @test.assert_eq
'ğŸ˜ŠğŸ‘‘ğŸ˜’'.1 'ğŸ‘‘' @test.assert_eq
'ğŸ˜ŠğŸ‘‘ğŸ˜’'.2 'ğŸ˜’' @test.assert_eq
'ğŸ˜ŠğŸ‘‘ğŸ˜’'.-1 'ğŸ˜’' @test.assert_eq
'ğŸ˜ŠğŸ‘‘ğŸ˜’'.-2 'ğŸ‘‘' @test.assert_eq
'ğŸ˜ŠğŸ‘‘ğŸ˜’'.-3 'ğŸ˜Š' @test.assert_eq
(## => 'ğŸ˜ŠğŸ‘‘ğŸ˜’'.3) @test.assert_raises_error
(## => 'ğŸ˜ŠğŸ‘‘ğŸ˜’'.-4) @test.assert_raises_error

$'ğŸ˜ŠÃ¨!' 3 @test.assert_eq
'ğŸ˜ŠÃ¨!'.0 'ğŸ˜Š' @test.assert_eq
'ğŸ˜ŠÃ¨!'.1 'Ã¨' @test.assert_eq
'ğŸ˜ŠÃ¨!'.2 '!' @test.assert_eq
'ğŸ˜ŠÃ¨!'.-1 '!' @test.assert_eq
'ğŸ˜ŠÃ¨!'.-2 'Ã¨' @test.assert_eq
'ğŸ˜ŠÃ¨!'.-3 'ğŸ˜Š' @test.assert_eq
(## => 'ğŸ˜ŠÃ¨!'.3) @test.assert_raises_error
(## => 'ğŸ˜ŠÃ¨!'.-4) @test.assert_raises_error

$'\ud83d\ude0a\ud83d' 3 @test.assert_eq
'\ud83d\ude0a\ud83d'.0 '\ud83d' @test.assert_eq
'\ud83d\ude0a\ud83d'.1 '\ude0a' @test.assert_eq
'\ud83d\ude0a\ud83d'.2 '\ud83d' @test.assert_eq
'\ud83d\ude0a\ud83d'.-1 '\ud83d' @test.assert_eq
'\ud83d\ude0a\ud83d'.-2 '\ude0a' @test.assert_eq
'\ud83d\ude0a\ud83d'.-3 '\ud83d' @test.assert_eq
(## => '\ud83d\ude0a\ud83d'.3) @test.assert_raises_error
(## => '\ud83d\ude0a\ud83d'.-4) @test.assert_raises_error

Array :: 'abc' {'a', 'b', 'c'} @test.assert_eq
Array :: 'Ã Ã¨Ã¬' {'Ã ', 'Ã¨', 'Ã¬'} @test.assert_eq
Array :: 'ğŸ˜ŠğŸ‘‘ğŸ˜’' {'ğŸ˜Š', 'ğŸ‘‘', 'ğŸ˜’'} @test.assert_eq
Array :: 'ğŸ˜ŠÃ¨!' {'ğŸ˜Š', 'Ã¨', '!'} @test.assert_eq
Array :: 'Ã¨ğŸ˜Š!' {'Ã¨', 'ğŸ˜Š', '!'} @test.assert_eq
Array :: 'Ã¨!ğŸ˜Š' {'Ã¨', '!', 'ğŸ˜Š'} @test.assert_eq
Array :: '!Ã¨ğŸ˜Š' {'!', 'Ã¨', 'ğŸ˜Š'} @test.assert_eq
Array :: '\ud83d\ude0a\ud83d' {'\ud83d', '\ude0a', '\ud83d'} @test.assert_eq
Array :: '\ud83dğŸ˜Š\ud83d' {'\ud83d', 'ğŸ˜Š', '\ud83d'} @test.assert_eq
Array :: '\ud83dğŸ˜ŠÃ¨' {'\ud83d', 'ğŸ˜Š', 'Ã¨'} @test.assert_eq
Array :: 'a\ude0a\ud83d' {'a', '\ude0a', '\ud83d'} @test.assert_eq

Vector :: 'abc' {'a', 'b', 'c'} @test.assert_eq
Vector :: 'Ã Ã¨Ã¬' {'Ã ', 'Ã¨', 'Ã¬'} @test.assert_eq
Vector :: 'ğŸ˜ŠğŸ‘‘ğŸ˜’' {'ğŸ˜Š', 'ğŸ‘‘', 'ğŸ˜’'} @test.assert_eq
Vector :: 'ğŸ˜ŠÃ¨!' {'ğŸ˜Š', 'Ã¨', '!'} @test.assert_eq
Vector :: 'Ã¨ğŸ˜Š!' {'Ã¨', 'ğŸ˜Š', '!'} @test.assert_eq
Vector :: 'Ã¨!ğŸ˜Š' {'Ã¨', '!', 'ğŸ˜Š'} @test.assert_eq
Vector :: '!Ã¨ğŸ˜Š' {'!', 'Ã¨', 'ğŸ˜Š'} @test.assert_eq
Vector :: '\ud83d\ude0a\ud83d' {'\ud83d', '\ude0a', '\ud83d'} @test.assert_eq
Vector :: '\ud83dğŸ˜Š\ud83d' {'\ud83d', 'ğŸ˜Š', '\ud83d'} @test.assert_eq
Vector :: '\ud83dğŸ˜ŠÃ¨' {'\ud83d', 'ğŸ˜Š', 'Ã¨'} @test.assert_eq
Vector :: 'a\ude0a\ud83d' {'a', '\ude0a', '\ud83d'} @test.assert_eq

Array :: (Iter :: 'abc') {'a', 'b', 'c'} @test.assert_eq
Array :: (Iter :: 'Ã Ã¨Ã¬') {'Ã ', 'Ã¨', 'Ã¬'} @test.assert_eq
Array :: (Iter :: 'ğŸ˜ŠğŸ‘‘ğŸ˜’') {'ğŸ˜Š', 'ğŸ‘‘', 'ğŸ˜’'} @test.assert_eq
Array :: (Iter :: 'ğŸ˜ŠÃ¨!') {'ğŸ˜Š', 'Ã¨', '!'} @test.assert_eq
Array :: (Iter :: 'Ã¨ğŸ˜Š!') {'Ã¨', 'ğŸ˜Š', '!'} @test.assert_eq
Array :: (Iter :: 'Ã¨!ğŸ˜Š') {'Ã¨', '!', 'ğŸ˜Š'} @test.assert_eq
Array :: (Iter :: '!Ã¨ğŸ˜Š') {'!', 'Ã¨', 'ğŸ˜Š'} @test.assert_eq
Array :: (Iter :: '\ud83d\ude0a\ud83d') {'\ud83d', '\ude0a', '\ud83d'} @test.assert_eq
Array :: (Iter :: '\ud83dğŸ˜Š\ud83d') {'\ud83d', 'ğŸ˜Š', '\ud83d'} @test.assert_eq
Array :: (Iter :: '\ud83dğŸ˜ŠÃ¨') {'\ud83d', 'ğŸ˜Š', 'Ã¨'} @test.assert_eq
Array :: (Iter :: 'a\ude0a\ud83d') {'a', '\ude0a', '\ud83d'} @test.assert_eq

Bool :: 'a' @test.assert_true
Bool :: '\0' @test.assert_true
Bool :: '\0\0' @test.assert_true
Bool :: '\ud83d' @test.assert_true
Bool :: 'ğŸ˜Š' @test.assert_true
Bool :: 'Ã ' @test.assert_true
Bool :: '' @test.assert_false

"" '' @test.assert_eq
"'" '\'' @test.assert_eq
"\"" '"' @test.assert_eq
"
" '\n' @test.assert_eq
'\\' '\x5c' @test.assert_eq
'\'' '\47' @test.assert_eq
'\'' '\47' @test.assert_eq
'\xff' '\377' @test.assert_eq
'\"' '\u0022' @test.assert_eq
'\a' '\x07' @test.assert_eq
'\b' '\x08' @test.assert_eq
'\e' '\x1b' @test.assert_eq
'\f' '\x0c' @test.assert_eq
'\n' '\x0a' @test.assert_eq
'\r' '\x0d' @test.assert_eq
'\t' '\x09' @test.assert_eq
'\t' '\x09' @test.assert_eq
'\v' '\x0b' @test.assert_eq

'hello' 'llo' <.> @test.assert_true
'hello' 'he' <.> @test.assert_true
'hello' 'helo' <.> @test.assert_false
'hello' 'lloa' <.> @test.assert_false
'' '' <.> @test.assert_false
'' 'abcd' <.> @test.assert_false
'hello' 'helloa' <.> @test.assert_false

Iter :: 'hello' = str_iter1
Iter :: 'he\0llo' = str_iter2
Iter :: '' = str_iter3
Iter :: '\0\0\0' = str_iter4
Iter :: 'a' = str_iter5

Array :: str_iter1 {'h', 'e', 'l', 'l', 'o'} @test.assert_eq
Array :: str_iter1 {'h', 'e', 'l', 'l', 'o'} @test.assert_eq
Array :: str_iter2 {'h', 'e', '\0', 'l', 'l', 'o'} @test.assert_eq
Array :: str_iter2 {'h', 'e', '\0', 'l', 'l', 'o'} @test.assert_eq
Array :: str_iter3 {,} @test.assert_eq
Array :: str_iter3 {,} @test.assert_eq
Array :: str_iter4 {'\0', '\0', '\0'} @test.assert_eq
Array :: str_iter4 {'\0', '\0', '\0'} @test.assert_eq
Array :: str_iter5 {'a'} @test.assert_eq
Array :: str_iter5 {'a'} @test.assert_eq
