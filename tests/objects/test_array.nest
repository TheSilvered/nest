|#| '../test_lib.nest' = test

{1, 2, 3, 4, 5} = arr

?::arr Array @test.assert_eq
?::{,} Array @test.assert_eq
$arr 5 @test.assert_eq
arr.0 1 @test.assert_eq
arr.1 2 @test.assert_eq
arr.2 3 @test.assert_eq
arr.3 4 @test.assert_eq
arr.4 5 @test.assert_eq
arr.-1 5 @test.assert_eq
arr.-2 4 @test.assert_eq
arr.-3 3 @test.assert_eq
arr.-4 2 @test.assert_eq
arr.-5 1 @test.assert_eq

##a i [a.(i)] {arr, 5} @test.assert_raises_error
##a i [a.(i)] {arr, -6} @test.assert_raises_error

10 = arr.0
arr.0 10 @test.assert_eq
50 = arr.-1
arr.-1 50 @test.assert_eq

{{1, 2},
 {3, 4}} = arr_2d

arr_2d.0 .0 1 @test.assert_eq
arr_2d.0 {1, 2} @test.assert_eq

{1, 2} <{1, 2}> @test.assert_eq
{1, 2}  {1, 2}  @test.assert_eq
{1, 2} <{1, 2, 3}> @test.assert_ne
{1, 2}  {1, 2, 3}  @test.assert_ne

{10;5} {10, 10, 10, 10, 10} @test.assert_eq

{,} @test.assert_false
{1} @test.assert_true

{,} 3 <.> @test.assert_false
{,} {,} <.> @test.assert_false
{1, 2, 3, 4} 5 <.> @test.assert_false
{1, '2', 3, {}} 5 <.> @test.assert_false
{1, '2', 3, {}} 3 <.> @test.assert_true
{1, '2', 3, {}} '2' <.> @test.assert_true
{1, '2', 3, {}} 1 <.> @test.assert_true
{1, '2', 3, {}} {} <.> @test.assert_true

Bool :: {,} @test.assert_false
Bool :: {0} @test.assert_true

Map :: {{'a', 1}, {'b', 2}} {'a': 1, 'b': 2} @test.assert_eq

{1, 2, 3, 4, 5} = arr
Iter :: arr = array_iter1
Iter :: {1} = array_iter2
Iter :: {,} = array_iter3
Iter :: {0, 0, 1, 0} = array_iter4

Array :: array_iter1 {1, 2, 3, 4, 5} @test.assert_eq
Array :: array_iter1 {1, 2, 3, 4, 5} @test.assert_eq
Array :: array_iter2 {1} @test.assert_eq
Array :: array_iter2 {1} @test.assert_eq
Array :: array_iter3 {,} @test.assert_eq
Array :: array_iter3 {,} @test.assert_eq
Array :: array_iter4 {0, 0, 1, 0} @test.assert_eq
Array :: array_iter4 {0, 0, 1, 0} @test.assert_eq

10 = arr.2
Array :: array_iter1 {1, 2, 10, 4, 5} @test.assert_eq
Array :: array_iter1 {1, 2, 10, 4, 5} @test.assert_eq

