|#| 'stdio.nest' = io
|#| 'stdsutil.nest' = su
|#| 'stdsys.nest' = sys

io.STDOUT = log_file -- allows tests to be ran singularly

#_cast_obj obj type [
    => type :: obj
]

#_assertion_failed msg [
    'Assertion Error' !! msg
]

#assert_eq a b [
    a b == ? =>
    : (a @su.repr) ' == ' (b @su.repr) >< @_assertion_failed
]

#assert_ne a b [
    a b != ? =>
    : (a @su.repr) ' != ' (b @su.repr) >< @_assertion_failed
]

#assert_true a [
    a ? =>
    : (a @su.repr) ' == true' >< @_assertion_failed
]

#assert_false a [
    !a ? =>
    : (a @su.repr) ' == false' >< @_assertion_failed
]

#assert_cast_error obj type [
    ?::type Type != ? 'Type Error' !! 'The type argument must be a Type'
    ?? type :: obj ?! _ =>
    type ' :: ' obj ' did not fail' >< @_assertion_failed
]

#assert_raises_error func args errname errmsg [
    ?::func Func != ?
        'Type Error' !! ('The first argument must be a Func, got type ' \
                         ?::func ' instead' ><)
    ?? args *@func ?! _ =>
    'The function did not fail' @_assertion_failed
]

#assert_obj_eq ob1 ob2 [
    (ob1 @sys.get_addr) (ob2 @sys.get_addr) != ?
        '\(ob1 @su.repr) and \(ob2 @su.repr) are different objects' @_assertion_failed
]

#assert_obj_ne ob1 ob2 [
    (ob1 @sys.get_addr) (ob2 @sys.get_addr) == ?
        '\(ob1 @su.repr) and \(ob2 @su.repr) are the same object' @_assertion_failed
]

#println s [
    s true log_file @io.println
]
