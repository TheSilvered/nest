|#| 'stdfs.nest' = fs
|#| 'stdio.nest' = io
|#| 'stdsutil.nest' = su
|#| 'stdsys.nest' = sys
|#| 'stderr.nest' = err
|#| 'stdsequtil.nest' = sequ
|#| 'test_lib.nest' = test

-- Creates or clears the log file
'test_output.txt' 'w' @io.open = test.log_file

sys.SUPPORTS_COLOR ? [
    '\e[31m' = C_RED
    '\e[32m' = C_GREEN
    '\e[0m' = C_RESET
] : [
    '' = C_RED
    '' = C_GREEN
    '' = C_RESET
]

0 = failed_tests

#run_test name path [
    !(name 'test_e_' @su.starts_with) ?
        |#| path
    : [
        ?? |#| path
        ?! e =>
        'Assertion Error' !! ('the file ' name ' should raise an error' ><)
    ]
]

#run_tests dir [
    ... Iter :: (dir @fs.list_dirs) := test_path [
        test_path @fs.extension '.nest' != ? ..
        test_path @fs.filename = name
        !(name 'test_' @su.starts_with) ? ..

        >>> ('Testing ' (name 5 -5 @sequ.slice) '... ' ><)
        run_test { name, test_path } @err.try = res

        res.error null == ? [
            C_GREEN ' PASSED' C_RESET >< true @io.println
            ..
        ]

        1 += _globals_.failed_tests

        C_RED ' FAILED' C_RESET ': ' res.error.name ' - ' res.error.message >< = s

        $res.traceback 0 != ?
            '; line ' res.traceback.1 .start.0 ' column ' res.traceback.1 .start.1 ><= s
        s true @io.println
    ]
]

sys.PLATFORM 'windows' == ? [
    '.\\object_tests' @run_tests
    '.\\std_lib_tests' @run_tests
    '.\\error_tests' @run_tests
] : [
    './object_tests' @run_tests
    './std_lib_tests' @run_tests
    './error_tests' @run_tests
]

test.log_file @io.flush
test.log_file @io.close

failed_tests @sys.exit
