|#| 'stdfs.nest' = fs
|#| 'stdio.nest' = io
|#| 'stdsutil.nest' = su
|#| 'stdsys.nest' = sys
|#| 'stderr.nest' = err
|#| 'stdsequtil.nest' = sequ
|#| 'test_lib.nest' = test

-- Creates or clears the log file
'test_output.txt' 'w' @io.open = test.log_file

sys.SUPPORTS_COLOR ? [
    '\e[31m' = C_RED
    '\e[32m' = C_GREEN
    '\e[94m' = C_BLUE
    '\e[0m' = C_RESET
] : [
    '' = C_RED
    '' = C_GREEN
    '' = C_BLUE
    '' = C_RESET
]

0 = failed_tests

#run_test path [
    |#| path
]

#error_location traceback [
    !traceback ($traceback 2 <) || ? => '; <unknown position>'
    traceback.1 = pos
    => '; line ' (pos.start.0 1 +) ' column ' (pos.start.1 1 +) ' file ' (pos.file @fs.path.filename @su.repr) ><
]

#run_tests dir [
    C_BLUE '** Testing \(dir @su.repr) **' C_RESET >< @io.println

    Vector :: (
        dir @fs.list_dir
        (##path => path @fs.is_file) @sequ.filter_i
        (##path => {path, path @fs.path.filename}) @sequ.map_i
        (##path => path.1 '.nest' @su.ends_with) @sequ.filter_i
        (##path => path.1 'test_' @su.starts_with) @sequ.filter_i
    ) = tests

    (
        tests (##t => t.1 'test_e_' @su.starts_with) @sequ.filter
        (##t => t.1) @sequ.sort
    ) = error_tests

    (
        tests (##t => !(t.1 'test_e_' @su.starts_with)) @sequ.filter
        (##t => t.1) @sequ.sort
    ) = tests

    ... tests := {path, name} [
        >>> ('Testing ' (name 5 -5 @sequ.slice) '...' ><)

        run_test {path} @err.try = res
        res.error null == ? [
            C_GREEN ' PASSED' C_RESET >< true @io.println
            ..
        ]

        1 += _globals_.failed_tests

        C_RED ' FAILED' C_RESET ': ' res.error.name ' - ' res.error.message >< = s
        res.traceback @error_location ><= s
        s true @io.println
    ]

    ... error_tests := {path, name} [
        >>> ('Testing [error] ' (name 7 -5 @sequ.slice) '...' ><)

        run_test {path} @err.try = res
        res.error null != ? [
            C_GREEN ' PASSED' C_RESET >< true @io.println
            ..
        ]

        1 += _globals_.failed_tests

        C_RED ' FAILED' C_RESET ': Assertion Error - the test should have failed' >< = s
        s true @io.println
    ]
]

`lexer`     @run_tests
`objects`   @run_tests
`optimizer` @run_tests
`parser`    @run_tests
`runtime`   @run_tests
`stdlib`    @run_tests

test.log_file @io.flush
test.log_file @io.close

failed_tests 0 == ?
    C_GREEN "\nAll tests passed." C_RESET >< @io.println
: failed_tests 1 == ?
    C_RED "\n1 test failed." C_RESET >< @io.println
:
    C_RED "\n" failed_tests " tests failed." C_RESET >< @io.println

failed_tests @sys.exit
