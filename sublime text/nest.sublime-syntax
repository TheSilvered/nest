%YAML 1.2
---
name: Nest
scope: source.nest

file_extensions:
  - nest

variables:
  identifier: '\b[A-Za-z_][A-Za-z_0-9]*\b'
  constant: '\b(_*\d*[A-Z]{2,}[A-Za-z_0-9]*|[A-Z])\b'
  lang_constants: '\b(true|false|null|_cwd_|_args_|_vars_|_globals_)\b'
  lang_types: '\b(Type|Int|Real|Bool|Null|Str|Array|Vector|Map|Func|Iter|Byte|IOfile)\b'
  lang_keywords: '(\?\.\.|\.\.\?|\.\.\.|\?|~=|\.\.|;)'
  lang_arith_operators: '(-:|\+|-|\*|/|//|\^|%|><)'
  lang_logic_operators: '(!=|==|>=|<=|&&|\|\||\|&)'
  lang_other_operators: '(\$|::|\?::|!|>>>|<<<)'
  lang_assign_operators: '(\+=|-=|\*=|/=|//=|\^=|%=|><=|=|\|#\|)'

contexts:
  main:
    - include: strings
    - include: comment
    - include: keywords
    - include: soft-keywords
    - include: func-def
    - include: func-call
    - include: builtins
    - include: values
    - include: general

  strings:
    - match: '(")(_(start|is_done|get_val|advance)_)(")'
      captures:
        1: punctuation.definition.string.begin.nest
        2: constant.character.escape.nest
        4: punctuation.definition.string.end.nest

    - match: '('')(_(start|is_done|get_val|advance)_)('')'
      captures:
        1: punctuation.definition.string.begin.nest
        2: constant.character.escape.nest
        4: punctuation.definition.string.end.nest

    - match: '(?<=\|#\|)\s*(")(__C__:)'
      captures:
        1: punctuation.definition.string.begin.nest
        2: constant.character.escape.nest
      push: string_double

    - match: '(?<=\|#\|)\s*('')(__C__:)'
      captures:
        1: punctuation.definition.string.begin.nest
        2: constant.character.escape.nest
      push: string_single

    - match: '"'
      scope: punctuation.definition.string.begin.nest
      push: string_double

    - match: "'"
      scope: punctuation.definition.string.begin.nest
      push: string_single

  values:
    - match: '(<\{|{)'
      push: arr-obj-vect

    - match: '{{constant}}'
      scope: constant.language.nest

    - match: '(?<=[^.]\.)\s*({{identifier}})'
      scope: text.nest
      captures:
        1: variable.language.nest

    - match: '{{identifier}}'
      scope: variable.other.nest

    - match: '\d+(\.\d+)?'
      scope: constant.numeric.nest

  comment:
    - match: '(-->|--+)'
      scope: comment.line.nest
      push: comment_end
    - match: '-/'
      scope: comment.line.nest
      push: multiline_comment_end

  keywords:
    - match: =>
      scope: keyword.control.nest

    - match: '\|>'
      scope: keyword.control.nest

    - include: operators

    - match: '{{lang_keywords}}'
      scope: keyword.control.nest

    - match: \.
      scope: punctuation.accessor.nest

  soft-keywords:
    - match: ':'
      scope: keyword.control.nest

  operators:
    - match: ->
      scope: keyword.operator.nest

    - match: '{{lang_logic_operators}}'
      scope: keyword.operator.logical.nest

    - match: '{{lang_assign_operators}}'
      scope: keyword.operator.assignment.nest

    - match: '{{lang_arith_operators}}'
      scope: keyword.operator.arithmetic.nest

    - match: '{{lang_other_operators}}'
      scope: keyword.operator.nest

    - match: '(<(?!\{)|(?<!\})>)'
      scope: keyword.operator.logical.nest

  func-call:
    - match: '(@@|@)\s*{{identifier}}((\s*\.)\s*{{identifier}})*'
      scope: variable.function.nest
      captures:
        1: keyword.operator.nest
        3: punctuation.accessor.nest

  general:
    - match: ']'
      scope: punctuation.section.block.end.nest

  builtins:
    - match: '{{lang_constants}}'
      scope: constant.language.nest

    - match: '{{lang_types}}'
      scope: storage.type.nest

  func-def:
    - match: '#\s*({{identifier}})'
      scope: keyword.declaration.function.nest
      captures:
        1: entity.name.function.nest
      push: func-args

  string_escape:
    - match: '\\([abfnrtv\\"'']|x[0-9a-fA-F][0-9a-fA-F]|[0-7]{1,3})'
      scope: constant.character.escape.nest
    - match: '\\(x[^0-9a-fA-F].|x[0-9a-fA-F][^0-9a-fA-F]|[^abfnrtv\\"''])'
      scope: invalid.illegal.nest

  string_double:
    - meta_scope: string.quoted.double.nest
    - include: string_escape
    - match: '"'
      scope: punctuation.definition.string.end.nest
      pop: true

  string_single:
    - meta_scope: string.quoted.single.nest
    - include: string_escape
    - match: '(''|$)'
      scope: punctuation.definition.string.end.nest
      pop: true

  comment_end:
    - meta_scope: comment.line.nest
    - match: '\\\r?\n'
    - match: '\n'
      pop: true

  multiline_comment_end:
    - meta_scope: comment.line.nest
    - match: '/-'
      pop: true

  func-args:
    - match: '{{identifier}}'
      scope: variable.parameter.nest
    - match: '[ \t]*'
      scope: text.nest
    - match: '\['
      scope: punctuation.section.block.begin.nest
      pop: true
    - match: .
      scope: invalid.illegal.nest

  arr-obj-vect:
    - include: strings
    - include: comment
    - include: operators
    - include: func-call
    - include: builtins
    - include: values

    - match: '[,:;]'
      scope: punctuation.separator.nest

    - match: '(\}|\}>)'
      pop: true
