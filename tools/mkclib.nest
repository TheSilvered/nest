|#| 'stdsys.nest' = sys
|#| 'stdfs.nest' = fs
|#| 'stdrand.nest' = rand
|#| 'stdio.nest' = io
|#| 'stdsutil.nest' = su

#fail [
    'Usage: nest mkclib.nest [new <name>|update] <path>' @io.println
    1 @sys.exit
]

$_args_ 3 < ? @fail

_args_.1 'update' == ? [
    $_args_ 3 != ? @fail
    _args_.2 = path
] : _args_.1 'new' == ? [
    $_args_ 4 != ? @fail
    _args_.2 = name
    _args_.3 = path
] : @fail

sys.PLATFORM 'windows' == ? [
    Iter :: ('..\\include' @fs.list_dir) = headers
] : [
    Iter :: ('../include' @fs.list_dir) = headers
]

Iter :: {
    {
        'windows/projects/nest',
        'Debug',
        {
            'libnest.lib',
            'libnest.dll'
        },
        'Windows x86 Debug'
    },
    {
        'windows/projects/nest',
        'Release',
        {
            'libnest.lib',
            'libnest.dll'
        },
        'Windows x86 Release'
    },
    {
        'windows/projects/nest',
        'x64/Debug',
        {
            'libnest.lib',
            'libnest.dll'
        },
        'Windows x64 Debug'
    },
    {
        'windows/projects/nest',
        'x64/Release',
        {
            'libnest.lib',
            'libnest.dll'
        },
        'Windows x64 Release'
    },
    {
        'linux',
        'linux_debug',
        { 'libnest.so' },
        'Linux x64/x86 Debug'
    },
    {
        'linux',
        'linux_release/x86',
        { 'libnest.so' },
        'Linux x86 Release'
    },
    {
        'linux',
        'linux_release/x64',
        { 'libnest.so' },
        'Linux x64 Release'
    }
} = configs

_args_.1 'update' == ? [
    path 'nest_source' @fs.join = header_path
    path = build_path

    (!(path 'Debug'             @fs.join @fs.is_dir)) \
    (!(path 'linux_debug'       @fs.join @fs.is_dir)) \
    (!(path 'linux_release/x64' @fs.join @fs.is_dir)) \
    (!(path 'linux_release/x86' @fs.join @fs.is_dir)) \
    (!(path 'nest_source'       @fs.join @fs.is_dir)) \
    (!(path 'Release'           @fs.join @fs.is_dir)) \
    (!(path 'x64/Debug'         @fs.join @fs.is_dir)) \
    (!(path 'x64/Release'       @fs.join @fs.is_dir)) || ? [
        'The selected directory does not contain a Nest library' @io.println
        1 @sys.exit
    ]
] : [
    name ' ' '_' @su.replace_substr \
         '-' '_' @su.replace_substr = name
    !(name (su.LETTERS su.DIGITS '_' ><) @su.is_charset) ? [
        "Invalid name '" name "'" >< @io.println
        1 @sys.exit
    ]
    name @su.to_lower = name
    path (name '/nest_source' ><) @fs.join = header_path
    path name @fs.join = build_path

    header_path @fs.make_dirs
    ... configs := { _, config, _, _ } [
        build_path '/' config >< @fs.make_dirs
    ]
]

... headers := header_file [
    header_file header_path fs.CPO.overwrite @fs.copy
]
'Copied headers' @io.println

... configs := { config_path, config, config_files, config_name } [
    '../build/' config_path '/' config >< = config_path
    false = failed
    ... Iter :: config_files := file [
        config_path '/' file >< = file_path
        !(file_path @fs.is_file) ? [
            "'" file_path "' could not be found" >< @io.println
            true = failed
            ..
        ]
        file_path (build_path '/' config ><) fs.CPO.overwrite @fs.copy
    ]
    failed ?
        '  To add the file(s) build ' config_name ' and update the library' >< @io.println
    :
        'Updated ' config_name >< @io.println
]

_args_.1 'update' == ?
    @sys.exit

build_path @sys._set_cwd

#create_guid upper [
    upper ?
        { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
          'A', 'B', 'C', 'D', 'E', 'F' } = chars
    :
        { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
          'a', 'b', 'c', 'd', 'e', 'f' } = chars

    '{' = s
    ... 8 [
        chars @rand.choice ><= s
    ]
    '-' ><= s
    ... 4 [
        chars @rand.choice ><= s
    ]
    '-4' ><= s
    ... 3 [
        chars @rand.choice ><= s
    ]
    '-' ><= s
    ... 4 [
        chars @rand.choice ><= s
    ]
    '-' ><= s
    ... 12 [
        chars @rand.choice ><= s
    ]
    => s '}' ><
]

---------------------------------- .sln file -----------------------------------

true @create_guid = sln_guid1
true @create_guid = sln_guid2
true @create_guid = sln_guid3

"
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.4.33213.308
MinimumVisualStudioVersion = 10.0.40219.1
Project(\"" sln_guid1 "\") = \"" name "\", \"" name "\\" name ".vcxproj\", \"" sln_guid2 "\"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		" sln_guid2 ".Debug|x64.ActiveCfg = Debug|x64
		" sln_guid2 ".Debug|x64.Build.0 = Debug|x64
		" sln_guid2 ".Debug|x86.ActiveCfg = Debug|Win32
		" sln_guid2 ".Debug|x86.Build.0 = Debug|Win32
		" sln_guid2 ".Release|x64.ActiveCfg = Release|x64
		" sln_guid2 ".Release|x64.Build.0 = Release|x64
		" sln_guid2 ".Release|x86.ActiveCfg = Release|Win32
		" sln_guid2 ".Release|x86.Build.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = " sln_guid3 "
	EndGlobalSection
EndGlobal
" >< = sln_content

name '.sln' >< 'w' @io.open = sln_file
sln_file sln_content @io.write
sln_file @io.close
"Created '" name ".sln'" >< @io.println

----------------------------------- makefile -----------------------------------

"LIB_NAME := " name "

CC=g++
CFLAGS=-Inest_source -Wall -shared -fPIC -rdynamic -std=c++2a
DBG_FLAGS=-D_DEBUG -g -O0
OUT_FILE=$(LIB_NAME).cnest

x64_DIR = linux_release/x64
x86_DIR = linux_release/x86
DBG_DIR = linux_debug

CLINKS = -lm -ldl -lnest
CLINK_DIR_DBG := -L$(DBG_DIR)
CLINK_DIR_x86 := -L$(x86_DIR)
CLINK_DIR_x64 := -L$(x64_DIR)
CLINKS_DBG := $(CLINK_DIR_DBG) $(CLINKS)
CLINKS_x86 := $(CLINK_DIR_x86) $(CLINKS)
CLINKS_x64 := $(CLINK_DIR_x64) $(CLINKS)

SRCS := $(filter-out $(LIB_NAME)/dllmain.cpp, $(wildcard $(LIB_NAME)/*.c*))
DBG_TARGET := $(DBG_DIR)/$(OUT_FILE)
x64_TARGET := $(x64_DIR)/$(OUT_FILE)
x86_TARGET := $(x86_DIR)/$(OUT_FILE)

.PHONY: debug x86

$(x64_TARGET): $(SRCS)
	mkdir -p $(x64_DIR)
	$(CC) $(CFLAGS) $(SRCS) $(CLINKS_x64) -O3 -o $(x64_TARGET)

x86: $(x86_TARGET);
$(x86_TARGET): $(SRCS)
	mkdir -p $(x86_DIR)
	$(CC) $(CFLAGS) $(SRCS) $(CLINKS_x86) -O3 -m32 -o $(x86_TARGET)

debug: $(DBG_TARGET);
$(DBG_TARGET): $(SRCS)
	mkdir -p $(DBG_DIR)
	$(CC) $(CFLAGS) $(SRCS) $(CLINKS_DBG) $(DBG_FLAGS) -o $(DBG_TARGET)
" >< = makefile_content

'makefile' 'w' @io.open = makefile
makefile makefile_content @io.write
makefile @io.close
"Created 'makefile'" >< @io.println

---------------------------------- .nest file ----------------------------------

"--$ --no-default

|#| '__C__:" name ".cnest' = __" name "

__" name ".add = add

_vars_ '__" name "' '_vars_' -
" >< = nest_content

name '.nest' >< 'w' @io.open = nest_file
nest_file nest_content @io.write
nest_file @io.close
"Created '" name ".nest'" >< @io.println

-------------------------------- .vcxproj file ---------------------------------

name @fs.make_dir
name @sys._set_cwd

@create_guid = proj_guid
name '_' '' @su.replace_substr = root_namespace

"<?xml version=\"1.0\" encoding=\"utf-8\"?>
<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">
    <ItemGroup Label=\"ProjectConfigurations\">
        <ProjectConfiguration Include=\"Debug|Win32\">
            <Configuration>Debug</Configuration>
            <Platform>Win32</Platform>
        </ProjectConfiguration>
        <ProjectConfiguration Include=\"Release|Win32\">
            <Configuration>Release</Configuration>
            <Platform>Win32</Platform>
        </ProjectConfiguration>
        <ProjectConfiguration Include=\"Debug|x64\">
            <Configuration>Debug</Configuration>
            <Platform>x64</Platform>
        </ProjectConfiguration>
        <ProjectConfiguration Include=\"Release|x64\">
            <Configuration>Release</Configuration>
            <Platform>x64</Platform>
        </ProjectConfiguration>
    </ItemGroup>
    <PropertyGroup Label=\"Globals\">
        <VCProjectVersion>16.0</VCProjectVersion>
        <Keyword>Win32Proj</Keyword>
        <ProjectGuid>" proj_guid "</ProjectGuid>
        <RootNamespace>" root_namespace "</RootNamespace>
        <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
    </PropertyGroup>
    <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />
    <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">
        <ConfigurationType>DynamicLibrary</ConfigurationType>
        <UseDebugLibraries>true</UseDebugLibraries>
        <PlatformToolset>v143</PlatformToolset>
        <CharacterSet>Unicode</CharacterSet>
    </PropertyGroup>
    <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">
        <ConfigurationType>DynamicLibrary</ConfigurationType>
        <UseDebugLibraries>false</UseDebugLibraries>
        <PlatformToolset>v143</PlatformToolset>
        <WholeProgramOptimization>true</WholeProgramOptimization>
        <CharacterSet>Unicode</CharacterSet>
    </PropertyGroup>
    <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">
        <ConfigurationType>DynamicLibrary</ConfigurationType>
        <UseDebugLibraries>true</UseDebugLibraries>
        <PlatformToolset>v143</PlatformToolset>
        <CharacterSet>Unicode</CharacterSet>
    </PropertyGroup>
    <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">
        <ConfigurationType>DynamicLibrary</ConfigurationType>
        <UseDebugLibraries>false</UseDebugLibraries>
        <PlatformToolset>v143</PlatformToolset>
        <WholeProgramOptimization>true</WholeProgramOptimization>
        <CharacterSet>Unicode</CharacterSet>
    </PropertyGroup>
    <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />
    <ImportGroup Label=\"ExtensionSettings\">
    </ImportGroup>
    <ImportGroup Label=\"Shared\">
    </ImportGroup>
    <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">
        <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />
    </ImportGroup>
    <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">
        <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />
    </ImportGroup>
    <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">
        <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />
    </ImportGroup>
    <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">
        <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />
    </ImportGroup>
    <PropertyGroup Label=\"UserMacros\" />
    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">
        <ClCompile>
            <WarningLevel>Level3</WarningLevel>
            <SDLCheck>true</SDLCheck>
            <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;WIN32;_DEBUG;TESTLIBFILES_EXPORTS;_WINDOWS;_USRDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
            <ConformanceMode>true</ConformanceMode>
            <PrecompiledHeader>NotUsing</PrecompiledHeader>
            <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
            <LanguageStandard>stdcpp20</LanguageStandard>
            <AdditionalIncludeDirectories>..\\nest_source;$(CoreLibraryDependencies);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
        </ClCompile>
        <Link>
            <SubSystem>Windows</SubSystem>
            <GenerateDebugInformation>true</GenerateDebugInformation>
            <EnableUAC>false</EnableUAC>
            <AdditionalLibraryDirectories>..\\Debug</AdditionalLibraryDirectories>
            <AdditionalDependencies>libnest.lib;$(CoreLibraryDependencies);%(AdditionalDependencies)</AdditionalDependencies>
        </Link>
    </ItemDefinitionGroup>
    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">
        <ClCompile>
            <WarningLevel>Level3</WarningLevel>
            <FunctionLevelLinking>true</FunctionLevelLinking>
            <IntrinsicFunctions>true</IntrinsicFunctions>
            <SDLCheck>true</SDLCheck>
            <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;WIN32;NDEBUG;TESTLIBFILES_EXPORTS;_WINDOWS;_USRDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
            <ConformanceMode>true</ConformanceMode>
            <PrecompiledHeader>NotUsing</PrecompiledHeader>
            <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
            <LanguageStandard>stdcpp20</LanguageStandard>
            <AdditionalIncludeDirectories>..\\nest_source;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
        </ClCompile>
        <Link>
            <SubSystem>Windows</SubSystem>
            <EnableCOMDATFolding>true</EnableCOMDATFolding>
            <OptimizeReferences>true</OptimizeReferences>
            <GenerateDebugInformation>true</GenerateDebugInformation>
            <EnableUAC>false</EnableUAC>
            <AdditionalLibraryDirectories>..\\Release</AdditionalLibraryDirectories>
            <AdditionalDependencies>libnest.lib;$(CoreLibraryDependencies);%(AdditionalDependencies)</AdditionalDependencies>
        </Link>
    </ItemDefinitionGroup>
    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">
        <ClCompile>
            <WarningLevel>Level3</WarningLevel>
            <SDLCheck>true</SDLCheck>
            <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;_DEBUG;TESTLIBFILES_EXPORTS;_WINDOWS;_USRDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
            <ConformanceMode>true</ConformanceMode>
            <PrecompiledHeader>NotUsing</PrecompiledHeader>
            <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
            <LanguageStandard>stdcpp20</LanguageStandard>
            <AdditionalIncludeDirectories>..\\nest_source;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
        </ClCompile>
        <Link>
            <SubSystem>Windows</SubSystem>
            <GenerateDebugInformation>true</GenerateDebugInformation>
            <EnableUAC>false</EnableUAC>
            <AdditionalLibraryDirectories>..\\x64\\Debug</AdditionalLibraryDirectories>
            <AdditionalDependencies>libnest.lib;$(CoreLibraryDependencies);%(AdditionalDependencies)</AdditionalDependencies>
        </Link>
    </ItemDefinitionGroup>
    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">
        <ClCompile>
            <WarningLevel>Level3</WarningLevel>
            <FunctionLevelLinking>true</FunctionLevelLinking>
            <IntrinsicFunctions>true</IntrinsicFunctions>
            <SDLCheck>true</SDLCheck>
            <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NDEBUG;TESTLIBFILES_EXPORTS;_WINDOWS;_USRDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
            <ConformanceMode>true</ConformanceMode>
            <PrecompiledHeader>NotUsing</PrecompiledHeader>
            <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
            <LanguageStandard>stdcpp20</LanguageStandard>
            <AdditionalIncludeDirectories>..\\nest_source;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
        </ClCompile>
        <Link>
            <SubSystem>Windows</SubSystem>
            <EnableCOMDATFolding>true</EnableCOMDATFolding>
            <OptimizeReferences>true</OptimizeReferences>
            <GenerateDebugInformation>true</GenerateDebugInformation>
            <EnableUAC>false</EnableUAC>
            <AdditionalLibraryDirectories>..\\x64\\Release</AdditionalLibraryDirectories>
            <AdditionalDependencies>libnest.lib;$(CoreLibraryDependencies);%(AdditionalDependencies)</AdditionalDependencies>
        </Link>
    </ItemDefinitionGroup>
    <ItemGroup>
        <ClInclude Include=\"framework.h\" />
        <ClInclude Include=\"" name ".h\" />
    </ItemGroup>
    <ItemGroup>
        <ClCompile Include=\"dllmain.cpp\" />
        <ClCompile Include=\"" name ".cpp\" />
    </ItemGroup>
    <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />
    <ImportGroup Label=\"ExtensionTargets\">
    </ImportGroup>
</Project>
" >< = proj_content

name '.vcxproj' >< 'w' @io.open = proj_file
proj_file proj_content @io.write
proj_file @io.close
"Created '" name ".vcxproj'" >< @io.println

---------------------------- .vcxproj.filters file -----------------------------

"<?xml version=\"1.0\" encoding=\"utf-8\"?>
<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">
    <ItemGroup>
        <Filter Include=\"Header files\">
            <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
            <Extensions>h;hh;hpp;hxx;h++;hm;inl;inc;ipp;xsd</Extensions>
        </Filter>
        <Filter Include=\"Source files\">
            <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
            <Extensions>cpp;c;cc;cxx;c++;cppm;ixx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
        </Filter>
        <Filter Include=\"Resources\">
            <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
            <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
        </Filter>
    </ItemGroup>
    <ItemGroup>
        <ClInclude Include=\"framework.h\">
            <Filter>Header files</Filter>
        </ClInclude>
        <ClInclude Include=\"" name ".h\">
            <Filter>Header files</Filter>
        </ClInclude>
    </ItemGroup>
    <ItemGroup>
        <ClCompile Include=\"dllmain.cpp\">
            <Filter>Source files</Filter>
        </ClCompile>
        <ClCompile Include=\"" name ".cpp\">
            <Filter>Source files</Filter>
        </ClCompile>
    </ItemGroup>
</Project>
" >< = filters_content

name '.vcxproj.filters' >< 'w' @io.open = filters_file
filters_file filters_content @io.write
filters_file @io.close
"Created '" name ".vcxproj.filters'" >< @io.println

--------------------------------------------------------------------------------

"#include \"framework.h\"

BOOL APIENTRY DllMain(HMODULE hModule,
                      DWORD   ul_reason_for_call,
                      LPVOID  lpReserved)
{
    return TRUE;
}
" = dllmain_content

"#ifndef FRAMEWORK_H
#define FRAMEWORK_H

#define WIN32_LEAN_AND_MEAN
#include <windows.h>

#endif // !FRAMEWORK_H
" = framework_h_content

"#ifndef " (name @su.to_upper) "_H
#define " (name @su.to_upper) "_H

#include \"nest.h\"

#ifdef __cplusplus
extern \"C\" {
#endif // !__cplusplus

EXPORT bool lib_init();
EXPORT Nst_DeclrList *get_func_ptrs();
// EXPORT void free_lib();

NST_FUNC_SIGN(add);

#ifdef __cplusplus
}
#endif // !__cplusplus

#endif // !" (name @su.to_upper) "_H
" >< = name_h_content

"#include \"" name ".h\"

#define FUNC_COUNT 1 // define here the number of functions inside the library

static Nst_ObjDeclr func_list_[FUNC_COUNT];
static Nst_DeclrList obj_list_ = { func_list_, FUNC_COUNT };
static bool lib_init_ = false;

bool lib_init()
{
    usize idx = 0;
    Nst_OpErr err = { nullptr, nullptr };

    func_list_[idx++] = NST_MAKE_FUNCDECLR(add, 2);

#if __LINE__ - FUNC_COUNT != 15 // keep this number as the line after the first
                                // func_list_[idx++] = ...
#error
#endif

    lib_init_ = err.name == nullptr;
    return lib_init_;
}

Nst_DeclrList *get_func_ptrs()
{
    return lib_init_ ? &obj_list_ : nullptr;
}

NST_FUNC_SIGN(add)
{
    Nst_Int a, b;
    NST_DEF_EXTRACT(\"ii\", &a, &b);
    return nst_int_new(a + b, err);
}
" >< = name_cpp_content

'dllmain.cpp' 'w' @io.open = dllmain_file
dllmain_file dllmain_content @io.write
dllmain_file @io.close
"Created 'dllmain.cpp'" @io.println

'framework.h' 'w' @io.open = framework_file
framework_file framework_h_content @io.write
framework_file @io.close
"Created 'framework.h'" @io.println

name '.h' >< 'w' @io.open = name_h_file
name_h_file name_h_content @io.write
name_h_file @io.close
"Created '" name ".h'" >< @io.println

name '.cpp' >< 'w' @io.open = name_cpp_file
name_cpp_file name_cpp_content @io.write
name_cpp_file @io.close
"Created '" name ".cpp'" >< @io.println

name @su.repr ' created succesfully!' >< @io.println
