|#| 'stdio.nest' = io
|#| 'stdfs.nest' = fs
|#| 'stdsutil.nest' = su

-- not all source files, only the ones that can be used
{
    'error.h',
    'function.h',
    'hash.h',
    'iter.h',
    'lib_import.h',
    'llist.h',
    'map.h',
    'nest_include.h',
    'nodes.h',
    'nst_types.h',
    'obj.h',
    'obj_ops.h',
    'sequence.h',
    'simple_types.h',
    'str.h',
    'tokens.h',
    'var_table.h',
    'error.c',
    'function.c',
    'hash.c',
    'iter.c',
    'lib_import.c',
    'llist.c',
    'map.c',
    'nodes.c',
    'obj.c',
    'obj_ops.c',
    'sequence.c',
    'simple_types.c',
    'str.c',
    'tokens.c',
    'var_table.c'
} = nest_source_files

#main [
    ($_args_ 3 !=) ($_args_ 4 !=) && ? [
        >>> 'USAGE: nest .\\make_clib_files.py (new <library_name>|update) <location>\n'
        => 1
    ]

    _args_.1 = operation
    ($_args_ 4 == ? _args_.2 : null) = project_name
    _args_.($_args_ 4 == ? 3 : 2) = location

    (operation 'new' !=) (operation 'update' !=) && ? [
        >>> ('The given operation ("'operation'") is not valid\n' ><)
        => 1
    ]

    !(location @fs.isdir) ? [
        >>> ('The given path ("'location'") doesn\'t exist\n' ><)
        => 2
    ]

    (location'\\nest_source' >< = srcdir) @fs.mkdir

    ... Iter :: nest_source_files ~= file_name [
        ('..\\nest\\'file_name >< 'r' @io.open = src_f) -1 @io.read = content
        src_f @io.close
        (srcdir'\\'file_name >< 'w' @io.open = dst_f) content @io.write
        dst_f @io.close
    ]

    operation 'update' == ? => 0

    project_name ' ' '_' @su.replace_substr = project_name_c

    !(project_name_c (su.LETTERS su.DIGITS '_' ><) @su.is_charset) ? [
        >>> ('The given name ("'project_name'") is not valid\n' ><)
        => 3
    ]

    project_name_c @su.to_upper = upper_project_name

    location'\\'project_name'.h' >< 'w' @io.open = header_file
    header_file ("#ifndef "upper_project_name"_H
#define "upper_project_name"_H

#include \"nest_source/nest_include.h\"

#ifdef __cplusplus
extern \"C\" {
#endif // !__cplusplus

__declspec(dllexport) bool lib_init();
__declspec(dllexport) FuncDeclr *get_func_ptrs();
__declspec(dllexport) INIT_LIB_OBJ_FUNC;

// Here you can put your function signatures
// They must always be `Nst_Obj *func_name(size_t arg_num, Nst_Obj **args, OpErr *err);`
// replace func_name with your function's name

// To compile remove precompiled headers in Project->Properties->C/C++->
// ->Precompiled headers and set \"Precompiled header\" to \"Not Using Precompiled
// Headers\" and define in Project->Properties->C/C++->Preprocessor the directive
// _CRT_SECURE_NO_WARNINGS

#ifdef __cplusplus
}
#endif // !__cplusplus

#endif // !"upper_project_name"_H" ><) @io.write
    header_file @io.close

    location'\\'project_name'.cpp' >< 'w' @io.open = source_file
    source_file ("#include \""project_name".h\"

#define FUNC_COUNT // Set this to the number of functions in your module

static FuncDeclr *func_list_;
static bool lib_init_ = false;

bool lib_init()
{
    if ( (func_list_ = new_func_list(FUNC_COUNT)) == nullptr )
        return false;

    size_t idx = 0;

    // Set each function to an index in func_list_
    // func_list_[idx++] = {
    //     func_ptr, -> the function pointer
    //     1, -> the number of arguments the function takes
    //     new_string_raw(\"func_name\", false) -> the string containing the name
    // }                                           of the funtion inside Nest

    lib_init_ = true;
    return true;
}

FuncDeclr *get_func_ptrs()
{
    return lib_init_ ? func_list_ : nullptr;
}

// Here you can put the implementations of your functions" ><) @io.write
    source_file @io.close

    -- remove precompiled header files
    location'\\pch.cpp' >< @fs.isfile ? location'\\pch.cpp' >< @fs.rmfile
    location'\\pch.h'   >< @fs.isfile ? location'\\pch.h'   >< @fs.rmfile

    -- change '#include "pch.h" to #include "framework.h"' since pch.h has
    -- just been removed
    (location'\\dllmain.cpp' >< @fs.isfile) \
    (location'\\framework.h' >< @fs.isfile) && ? [
        location'\\dllmain.cpp' >< 'r' @io.open = dllmain_cpp
        dllmain_cpp -1 @io.read \
          'pch' 'framework' @su.replace_substr = dllmain_content
        dllmain_cpp @io.close

        location'\\dllmain.cpp' >< 'w' @io.open = dllmain_cpp
        dllmain_cpp dllmain_content @io.write
        dllmain_cpp @io.close
    ]

    => 0
]

@main