|#| 'stdsutil.nest' = su
|#| 'stdio.nest' = io
|#| 'stdsequtil.nest' = sequ
|#| 'stditutil.nest' = itu
|#| 'stdfs.nest' = fs
|#| 'stdsys.nest' = sys
|#| 'stdmath.nest' = math

-/ ============================ General Logging ============================ /-

#_logging_message level message parser [
    parser ?
        => level ' ' (parser @parser_pos_info) ': ' message ><
    :
        => level ': ' message ><
]

-- printed when the syntax does not adhere to the standard
#warning message parser [
    sys.SUPPORTS_COLOR ? >>> '\e[33m'
    '  Warning' message parser @_logging_message @io.println
    sys.SUPPORTS_COLOR ? >>> '\e[0m'
]

-- printed when data may be lost
#error message parser [
    sys.SUPPORTS_COLOR ? >>> '\e[31m'
    '  Error' message parser @_logging_message @io.println
    sys.SUPPORTS_COLOR ? >>> '\e[0m'
]

-- printed when parsing cannot continue on the file
#fatal message parser [
    sys.SUPPORTS_COLOR ? >>> '\e[31m'
    '  Fatal' message parser @_logging_message >< @io.println
    sys.SUPPORTS_COLOR ? >>> '\e[0m'
    true = parser.fatal_error
]

-/ ================================ Parser ================================= /-

#parser_new file_name lines [
    => {'file': file_name, 'lines': lines, 'idx': -1, 'fatal_error': false}
]

#parser_next_line parser [
    parser.idx 1 + $parser.lines < ? [
        1 += parser.idx
        parser.lines.(parser.idx) = line
        => line @su.rtrim
    ]
    => null
]

#parser_curr_line parser [
    => -1 parser.idx $parser.lines < ?
        parser.lines.(parser.idx) @su.rtrim
    :
        null
]

#parser_pos_info parser [
    => "(file \(parser.file @su.repr), line \(parser.idx 1 +))"
]

-/ ========================= Parsing documentation ========================= /-

#get_next_doc_block parser data_map [
    ?.. parser @parser_next_line = line null != [
        line @su.ltrim = trimmed_line
        !(trimmed_line '/*' @su.starts_with) ?
            ..

        trimmed_line '/*/' <.> ? [
            "lines cannot contain '/*/'" parser @fatal
            => null
        ]

        trimmed_line '[docs:ignore]' <.> ? [
            !(parser @_reach_block_end) ? => null
        ] : [
            => parser data_map @_get_block_data
        ]
    ]
    => null
]

#_reach_block_end parser [
    parser @parser_curr_line = curr_line
    curr_line '*/' @su.ends_with ? => true

    false = was_closed
    ?.. parser @parser_next_line = line null != [
        line '*/' @su.ends_with ? [
            true = was_closed
            ;

        ]
    ]
    !was_closed ? [
        'doc block was not closed' parser @fatal
        => false
    ]
    => true
]

{
    'sym_info',
    'file_info',
    'raw_block',
    'link_info'
} @sequ.enum = BLOCK_MAP_TYPES

{
    'code',
    'text',
    'image',
    'ignore',
    'error'
} @sequ.enum = LINK_TYPES

#_sym_info_map [
    => {
        '_type': BLOCK_MAP_TYPES.sym_info,
        null: <{}>,
        'brief': <{}>,
        'param': <{}>,
        'return': <{}>,
        '_ignored': <{}>
    }
]

#_file_info_map [
    => {
        '_type': BLOCK_MAP_TYPES.file_info,
        'file': <{}>,
        'brief': <{}>,
        'author': <{}>,
        '_ignored': <{}>
    }
]

#_raw_block_map [
    => {
        '_type': BLOCK_MAP_TYPES.raw_block,
        'raw': ''
    }
]

#_link_info_map [
    => {
        '_type': BLOCK_MAP_TYPES.link_info,
        'sym_name': '',
        'link_type': LINK_TYPES.code,
        'internal_link': true,
        'link': ''
    }
]

#_get_block_data parser data_map [
    parser @parser_curr_line = line
    {} = data
    line @su.ltrim = trimmed_line
    trimmed_line line != ?
        'white space before documentation comment' parser @warning

    trimmed_line '*/' @su.ends_with = is_one_line

    trimmed_line '/**' @su.starts_with is_one_line && ? [
        "one-line doc should start with '/*'' not '/**'" parser @warning
        trimmed_line 1 @sequ.slice = trimmed_line
    ]

    line '[docs:raw]' <.> ?
        => parser @_raw_block_data

    data_map null == ?
        @_sym_info_map = data_map

    is_one_line ? [
        trimmed_line 2 -2 @sequ.slice = trimmed_line
        !(trimmed_line.0 trimmed_line.-1 ' ' ==) ?
            "white space should be left after '/*' and before '*/" \
            parser @warning
        trimmed_line @su.trim = trimmed_line

        trimmed_line '[docs:' @su.starts_with ?
            => parser trimmed_line @_docs_link_data

        <{trimmed_line}> = data_map.(null)
        => data_map
    ]

    !(trimmed_line '/**' @su.starts_with) ? [
        "multi-line doc blocks should start with '/**'" parser @warning
        trimmed_line 2 @sequ.slice = trimmed_line
    ] : [
        trimmed_line 3 @sequ.slice = trimmed_line
    ]

    trimmed_line '' != ? [
        'the first line should not contain text' parser @warning
        trimmed_line @su.trim = curr_text
    ] : [
        '' = curr_text
    ]

    null = curr_context
    curr_text ':' @su.ends_with = can_be_list
    false = in_list

    ?.. parser @parser_next_line = line null != [
        line @su.ltrim = trimmed_line
        !trimmed_line ? [
            'doc blocks should not contain completly emtpy lines' \
            parser @warning
            ..
        ]
        trimmed_line.0 '*' != ? [
            "block lines must start with an asterisk '*'" parser @error
            ..
        ]
        !(line ' *' @su.starts_with) ?
            "lines should start with ' *'" parser @warning

        trimmed_line '*/' @su.ends_with ? [
            trimmed_line '*/' != ?
                'closing line cannot contain text in blocks' parser @error
            => curr_text data_map curr_context @_append_curr_text
        ]
        trimmed_line 1 @sequ.slice = trimmed_line

        trimmed_line '!' @su.starts_with (can_be_list in_list ||) && ? [
            true = in_list
            trimmed_line 1 @sequ.slice = trimmed_line
            trimmed_line '' == ?
                "blocks should not end with ' *!'" parser @warning
            :
                '\n' ><= curr_text
            '!' = c
        ] : [
            '*' = c
        ]

        trimmed_line '' == ? [
            curr_text data_map curr_context @_append_curr_text
            '' = curr_text
            ..
        ]

        trimmed_line.0 ' ' != ?
            "there should be white space after '\(c)'" parser @warning
        trimmed_line @su.ltrim = trimmed_line
        trimmed_line '@' @su.starts_with ? [
            parser trimmed_line data_map @_get_context \
                = {curr_context, new_text}
            curr_text data_map curr_context @_append_curr_text
            new_text = curr_text
            curr_text ':' @su.ends_with = can_be_list
            ..
        ]
        curr_text trimmed_line @_append_text = curr_text
        curr_text ':' @su.ends_with = can_be_list
    ]

    'doc block was not closed' parser @fatal
    => null
]

#_append_text text new [
    text ? [
        text.-1 '\n' == ?
            => text new ><
        :
            => text ' ' new ><
    ] : [
     => new
    ]
]

#_append_curr_text curr_text data_map curr_context [
    curr_context null == !(data_map curr_context <.>) && ?
        =>
    curr_text '' != ?
        data_map.(curr_context) curr_text +
    => data_map
]

#_get_context parser line data_map [
    '' = context_name

    ... line 1 @sequ.slice_i := c [
        c @su.is_alpha ? c ><= context_name : ;
    ]

    context_name '' == ? [
        "missing block name after '@'" parser @error
        => {'_ignored', ''}
    ]

    !(data_map context_name <.>) ? [
        '\(context_name @su.repr) is not a valid block name' parser @error
        => {'_ignored', ''}
    ]

    line ($context_name 1 +) @sequ.slice = content
    !(content @su.trim) ? [
        'content should follow the name of the block' parser @warning
        => {contex_name, ''}
    ]

    content.0 ' ' != ? [
        'there should be whitespace after the name of the block' \
        parser @warning
    ]
    content @su.trim = content
    => {context_name, content}
]

#_raw_block_data parser [
    '' = text

    false = was_closed
    ?.. parser @parser_next_line = line null != [
        line '*/' @su.ends_with ? [
            $line 2 != ?
                'closing line cannot contain text in raw blocks' parser @error
            true = was_closed
            ;

        ]
        line '\n' ><= text
    ]

    !was_closed ? [
        'doc block was not closed' parser @fatal
        => null
    ]

    @_raw_block_map = map
    text = map.raw
    => map
]

#_docs_link_data parser line [
    @_link_info_map = data_map

    line @su.lsplit = args
    args.0 ':' @su.lsplit = {_, link_action}

    !({'ignore_sym', 'link'} link_action <.>) ? [
        'invalid action \(link_action @su.repr)' parser @error
        LINK_TYPES.error = data_map.link_type
        => data_map
    ]

    $args 1 <= ? [
        'not enough arguments for the action' parser @error
        LINK_TYPES.error = data_map.link_type
        => data_map
    ]

    args.-1 .-1 ']' != ? [
        "missing ']'" parser @error
        LINK_TYPES.error = data_map.link_type
        => data_map
    ]
    args.-1 null -1 @sequ.slice = args.-1

    link_action 'ignore_sym' == ? [
        $args 2 != ? [
            "'ignore_sym' expects exactly one argument" parser @error
            LINK_TYPES.error = data_map.link_type
            => data_map
        ]
        LINK_TYPES.ignore = data_map.link_type
        args.1 = data_map.sym_name
        => data_map
    ]

    $args 4 > ? [
        "'link' expects only two or three arguments" parser @error
        LINK_TYPES.error = data_map.link_type
        => data_map
    ]

    args.1 = data_map.sym_name

    args.2 .0 '<' == ? [
            args.2 .-1 '>' != ? [
            "missing '>'" parser @error
            LINK_TYPES.error = data_map.link_type
            => data_map
        ]
        args.2 1 -1 @sequ.slice = data_map.link
        false = data_map.internal_link
    ] : [
        args.2 = data_map.link
    ]

    $args 4 != ? => data_map

    args.3 = link_type
    |> link_type [
      ? 'c' [
        LINK_TYPES.code = link_type
    ] ? 't' [
        LINK_TYPES.text = link_type
    ] ? 'i' [
        LINK_TYPES.image = link_type
    ] ? [
        '\(link_type @su.repr) is not a valid link type' parser @warning
        LINK_TYPES.code = link_type
    ]
    ]
    link_type = data_map.link_type
    => data_map
]

-/ ========================== Parsing symbol data ========================== /-

{
    'error',
    'function',
    'struct',
    'macro',
    'typedef',
    'enum',
    'union',
    'r_struct', -- raw struct
    'r_union',  -- raw union
    'r_enum',   -- raw enum
    't_func'    -- function typedef
} -1 @sequ.enum = SYMBOL_TYPES

#get_symbol_data parser [
    parser @_get_symbol_type = {symbol_type, symbol_text}

    |> symbol_type [
      ? SYMBOL_TYPES.error [
        =>
    ] ? SYMBOL_TYPES.function [
        symbol_text @_get_function_data = symbol_data
    ] ? SYMBOL_TYPES.macro [
        symbol_text @_get_macro_data = symbol_data
    ] ? SYMBOL_TYPES.struct [
        ..
    ] ? SYMBOL_TYPES.enum [
        ..
    ] ? SYMBOL_TYPES.union [
        symbol_type symbol_text @_get_s_e_u_data = symbol_data
    ] ? SYMBOL_TYPES.typedef [
        symbol_text @_get_typedef_data = symbol_data
    ] ? SYMBOL_TYPES.r_struct [
        ..
    ] ? SYMBOL_TYPES.r_enum [
        ..
    ] ? SYMBOL_TYPES.r_union [
        symbol_type symbol_text @_get_raw_s_e_u_data = symbol_data
    ] ? SYMBOL_TYPES.t_func [
        symbol_text @_get_t_func_data = symbol_data
    ] ? [
        'invalid symbol type' parser @error
        =>
    ]
    ]

    symbol_data.error null != ? [
        symbol_data.error parser @error
        =>
    ]
    symbol_data 'error' -
    => symbol_data
]

#_get_symbol_type parser [
    parser @parser_next_line = line
    !line ? [
        'expected a symbol' parser @error
        => {SYMBOL_TYPES.error, ''}
    ]

    line '#define' @su.starts_with ? [
        => parser @_get_macro
    ]

    0 = paren
    0 = bracket
    0 = brace
    '' = symbol_text
    false = valid_symbol

    ..? line null != [
        line paren bracket brace @_paren_count = {paren, bracket, brace}
        (line ';' @su.ends_with) (paren bracket brace 0 ==) && ? [
            '\n' line ><= symbol_text
            true = valid_symbol
            ;
        ]
        '\n' line ><= symbol_text
        parser @parser_next_line = line
    ]

    !valid_symbol ? [
        'the symbol is not valid' parser @error
        => {SYMBOL_TYPES.error, ''}
    ]
    symbol_text 1 @sequ.slice = symbol_text -- remove the initial line feed
    symbol_text = original_text
    symbol_text 'NstEXP' @su.lremove @su.trim = symbol_text

    symbol_text 'typedef' @su.starts_with ? [
        symbol_text 'typedef' @su.lremove @su.trim = symbol_text
        true = is_typedef
    ] : [
        false = is_typedef
    ]
    symbol_text '}' @su.rfind = close_bracket
    symbol_text ')' @su.rfind = close_paren

    close_paren close_bracket -1 == is_typedef && ? [
        => {SYMBOL_TYPES.typedef, original_text}
    ]

    close_paren close_bracket > ? [
        is_typedef ?
            => {SYMBOL_TYPES.t_func, original_text}
        :
            => {SYMBOL_TYPES.function, original_text}
    ]

    symbol_text 'volatile' @su.lremove @su.trim = symbol_text

    symbol_text 'enum' @su.starts_with ? [
        is_typedef ?
            SYMBOL_TYPES.enum = symbol_type
        :
            SYMBOL_TYPES.r_enum = symbol_type
    ] : symbol_text 'union' @su.starts_with ? [
        is_typedef ?
            SYMBOL_TYPES.union = symbol_type
        :
            SYMBOL_TYPES.r_union = symbol_type
    ] : symbol_text 'struct' @su.starts_with ? [
        is_typedef ?
            SYMBOL_TYPES.struct = symbol_type
        :
            SYMBOL_TYPES.r_struct = symbol_type
    ] : [
        'cannot determine the kind of symbol' parser @error
        => {SYMBOL_TYPES.error, ''}
    ]

    => {symbol_type, original_text}
]

#_paren_count line paren bracket brace [
    line '(' @sequ.count += paren
    line ')' @sequ.count -= paren
    line '[' @sequ.count += bracket
    line ']' @sequ.count -= bracket
    line '{' @sequ.count += brace
    line '}' @sequ.count -= brace
    => {paren, bracket, brace}
]

#_get_macro parser [
    parser @parser_curr_line = line
    line = macro_text
    ?.. line '\\' @su.ends_with [
        parser @parser_next_line = line
        line null == ? [
            'expected a line for macro continuation' parser @error
            => {SYMBOL_TYPES.error, ''}
        ]
        '\n' line ><= macro_text
    ]

    => {SYMBOL_TYPES.macro, macro_text}
]

#_symbol_data_map type [
    => {'name': null, 'synopsis': null, 'type': type, 'error': null}
]

#_get_function_data func_text [
    func_text 'NstEXP' @su.lremove @su.trim = func_text
    func_text '\n' ' ' @su.replace = func_text
    func_text @su.lsplit @su.join = func_text

    SYMBOL_TYPES.function @_symbol_data_map = data_map

    func_text 'Nst_FUNC_SIGN' @su.starts_with ? [
        func_text '(' @su.lfind = open_paren
        func_text ')' @su.lfind = close_paren
        func_text (open_paren 1 +) close_paren @sequ.slice = data_map.name
        func_text null (close_paren 1 +) @sequ.slice = data_map.synopsis
        => data_map
    ]

    func_text '}' @su.lfind = close_brace
    close_brace -1 != ?
        func_text '(' close_brace @su.lfind = open_paren
    :
        func_text '(' @su.lfind = open_paren

    func_text null open_paren @sequ.slice @_split_tokens = tokens
    $tokens 0 == ? [
        'failed to parse function' = data_map.error
        => data_map
    ]

    func_text open_paren @sequ.slice @_split_args = args

    '' = synopsis
    ... tokens := token [
        token 'NstC' == ? ..
        token ',)]' @su.is_charset ? [
            token ' ' ><= synopsis
            ..
        ] : token '}' == ? [
            ' } ' ><= synopsis
        ]
        !synopsis ? [
            token ><= synopsis
            ..
        ]
        synopsis.-1 '*([' @su.is_charset ?
            token ><= synopsis
        :
            ' ' token ><= synopsis
    ]

    $synopsis 2 + = indent
    args.-1 null -1 @sequ.slice = args.-1
    args.0 ',' ><= synopsis
    synopsis = line
    '' = synopsis
    ... args 1 @sequ.slice_i := arg [
        line ' ' arg ',' >< = new_line
        $new_line 79 > ? [
            line ><= synopsis
            '\n' ({'';indent} @su.join) >< = line
            arg ',' ><= line
            ..
        ]
        new_line = line
    ]
    line ? line ><= synopsis
    synopsis null -1 @sequ.slice = synopsis -- removes the final comma
    ')' ><= synopsis

    tokens.-1 = data_map.name
    synopsis = data_map.synopsis

    => data_map
]

#_split_tokens text [
    '' = ident
    <{}> = tokens

    ... text := c [
        (c @su.is_alnum) (c '_' ==) || ? [
            c ><= ident
            ..
        ]
        ident ? tokens ident +
        '' = ident
        c ' ' != ?
            tokens c +
    ]
    ident ? tokens ident +
    => tokens
]

#_split_args text [
    text 'Nst_WIN_FMT ' @su.replace ',' @su.lsplit su.trim @sequ.map = maybe_args

    <{}> = args
    '' = curr_arg
    -1= paren
    0 = bracket
    0 = brace
    0 = g_paren
    ... maybe_args := arg [
        arg paren bracket brace @_paren_count = {paren, bracket, brace}

        curr_arg ?
            curr_arg ', ' arg >< = curr_arg
        :
            arg = curr_arg

        -- needed to omit extra stuff after the end of the arguments such as
        -- Nst_GNU_FMT
        ... arg := c [
            c ')' == ? [
                1 -= g_paren
                g_paren 0 == ? ;
            ] : c '(' == ? [
                1 += g_paren
            ]
        ]

        g_paren 0 == ? [
            curr_arg ')' @su.rfind = arg_end
            curr_arg null (arg_end 1 +) @sequ.slice = curr_arg
            args curr_arg +
            ;
        ]
        paren bracket brace 0 == ? [
            args curr_arg +
            '' = curr_arg
            ..
        ]
    ]

    args (## x => x 'struct _' @su.replace) true @sequ.map
    => args
]

#_get_macro_data macro_text [
    macro_text '#define' @su.lremove @su.trim = macro_text
    macro_text '(' @su.lfind = open_paren
    macro_text ' ' @su.lfind = space
    macro_text ')' @su.lfind = close_paren
    SYMBOL_TYPES.macro @_symbol_data_map = data_map

    (open_paren -1 !=) (open_paren space <) && ? [
        '#define ' (macro_text null (close_paren 1 +) @sequ.slice) >< \
             = data_map.synopsis
        macro_text null open_paren @sequ.slice = data_map.name
    ] : (space -1 !=) ? [
        '' = data_map.synopsis
        macro_text null space @sequ.slice = data_map.name
    ] : [
        '' = data_map.synopsis
        macro_text = data_map.name
    ]
    => data_map
]

#_get_s_e_u_data symbol_type symbol_text [
    symbol_text 'NstEXP' @su.lremove @su.trim = symbol_text

    symbol_text '}' @su.rfind = close_brace
    symbol_text (close_brace 1 +) @sequ.slice = name
    name ' ' @su.replace '\n' @su.replace ';' @su.replace = name

    symbol_text null close_brace @sequ.slice = synopsis
    synopsis 'struct _' @su.replace = synopsis
    symbol_type SYMBOL_TYPES.struct == ?
        synopsis '\(name) ' 'struct _\(name) ' @su.replace = synopsis
    '} \(name)' ><= synopsis

    symbol_type @_symbol_data_map = data_map
    name = data_map.name
    synopsis = data_map.synopsis
    => data_map
]

#_get_typedef_data typedef_text [
    typedef_text 'NstEXP' @su.lremove @su.trim = typedef_text
    typedef_text @_split_tokens = tokens

    SYMBOL_TYPES.typedef @_symbol_data_map = data_map
    tokens.-2 = data_map.name
    typedef_text null -1 @sequ.slice = data_map.synopsis
    => data_map
]

#_get_raw_s_e_u_data symbol_type symbol_text [
    symbol_text 'NstEXP' @su.lremove @su.trim = symbol_text
    symbol_text = orig_text

    symbol_text '\n' ' ' @su.replace \
        'enum ' @su.lremove \
        'union ' @su.lremove \
        'struct ' @su.lremove = symbol_text

    (symbol_text @_split_tokens).0 = name

    symbol_type @_symbol_data_map = data_map
    name = data_map.name
    orig_text = data_map.synopsis

    => data_map
]

#_get_t_func_data t_func_text [
    t_func_text 'NstEXP' @su.lremove @su.trim = t_func_text
    t_func_text '\n' ' ' @su.replace = t_func_text
    t_func_text @su.lsplit @su.join = t_func_text

    SYMBOL_TYPES.t_func @_symbol_data_map = data_map

    t_func_text '}' @su.lfind = close_brace
    close_brace -1 != ?
        t_func_text ')' close_brace @su.lfind = close_paren
    :
        t_func_text ')' @su.lfind = close_paren

    t_func_text '(' close_paren @su.lfind = open_paren

    t_func_text null open_paren @sequ.slice = synopsis
    (synopsis @_split_tokens).-2 = name
    t_func_text open_paren @sequ.slice @_split_args = args

    $synopsis 2 + = indent
    args.-1 null -1 @sequ.slice = args.-1
    args.0 ',' ><= synopsis
    synopsis = line
    '' = synopsis
    ... args 1 @sequ.slice_i := arg [
        line ' ' arg ',' >< = new_line
        $new_line 79 > ? [
            line ><= synopsis
            '\n' ({'';indent} @su.join) >< = line
            arg ',' ><= line
            ..
        ]
        new_line = line
    ]
    line ? line ><= synopsis
    synopsis null -1 @sequ.slice = synopsis -- removes the final comma
    ')' ><= synopsis

    name = data_map.name
    synopsis = data_map.synopsis

    => data_map
]

-/ =========================== Markdown Writing ============================ /-

#title text level [
    level 0 == ? => '**\(text):**\n'

    '' = s
    ... level [
        '#' ><= s
    ]
    => '\(s) \(text)\n'
]

#paragraph text [
    => text 80 @_format_line_width
]

#list items [
    '' = ul
    ... items := item [
        '- ' (item 78 2 @_format_line_width) ><= ul
    ]
    => ul
]

#code_block text language [
    language null == ? 'text' = language
    => '```\(language)\n\(text)\n```\n'
]

#note_box text [
    => '!!!note\n    \(text 76 4 @_format_line_width)'
]

#warning_box text [
    => '!!!warning\n    \(text 76 4 @_format_line_width)'
]

#_format_line_width text width indent [
    indent null == ? 0 = indent

    '' = lines
    Vector :: (text @su.lsplit) true @sequ.reverse = words
    words (##x => x '[docs:nbsp]' ' ' @su.replace) true @sequ.map

    ?.. $words 0 != [
        words 1 / = line

        ?.. ($words 0 !=) ($line $words.-1 + width <) && [
            ' ' (words 1 /) ><= line
        ]
        $lines 0 != ? [
            ... indent [
                ' ' line >< = line
            ]
        ]
        line '\n' ><= lines
    ]
    => lines
]

#hr [
    => '---\n'
]

-/ ============================ Link management ============================ /-

#link_manager_new [
    => {
        'symbols': {},
        'aliases': {},
        'ignored_symbols': {}
    }
]

#link_manager_add_symbols link_manager file_blocks [
    file_blocks.header.file.0 = file
    'c_api-' (file '.' @su.lsplit).0 '.md' >< = file

    ... file_blocks.symbols := symbol [
        symbol.sym.name = name
        link_manager.symbols.(name) null != ? [
            '\(name @su.repr) is a duplicate symbol' @error
            ..
        ]

        '\(file)#\(name @su.to_lower)' = link_manager.symbols.(name)
    ]

    ... file_blocks.link_info := link_info [
        link_info.sym_name @_fix_name = name
        !name ? ..

        link_info.link_type LINK_TYPES.ignore == ? [
            null = link_manager.ignored_symbols.(name)
        ] : [
            {link_info.link, link_info.internal_link, link_info.link_type} \
                = link_manager.aliases.(name)
        ]
    ]
]

#_fix_name name error [
    name '\\' ' ' @su.replace = name
    name = orig_name

    ?.. name (' *()' name.-1 <.>) && [
        name 0 -1 @sequ.slice = name
    ]

    !name ? [
        error ? '\(orig_name @su.repr) is not a vaild link name' @error
        => null
    ]

    => name
]

#link_manager_expand_internal_links link_manager [
    {} = new_aliases
    ... link_manager.aliases := {name, {link, internal_link, link_type}} [
        !internal_link ? [
            {link, link_type} = new_aliases.(name)
            ..
        ]

        link_manager.symbols.(link) = new_link
        new_link null == ? [
            link_manager.aliases.(link) = alias_link

            alias_link null != ? [
                "link from '\(name)' to '\(link)', an alias" @error

            ] : [
                "linking '\(name)' to '\(link)' failed, name not found" @error
            ]
            ..
        ]

        {new_link, link_type} = new_aliases.(name)
    ]
    new_aliases = link_manager.aliases
]

#link_manager_get_link link_manager name [
    name = orig_name
    name false @_fix_name = name
    !name ? => '`\(name)`'

    link_manager.ignored_symbols name <.> ? [
        => '`\(orig_name)`'
    ]

    link_manager.aliases.(name) = alias_link

    alias_link null != ? [
        orig_name ' ' '[docs:nbsp]' @su.replace = orig_name
        alias_link = {link, link_type}

        |> link_type [
        ? LINK_TYPES.code [
            => '[`\(orig_name)`](\(link))'
        ]
        ? LINK_TYPES.image [
            => '![\(orig_name)](\(link))'
        ]
        ? LINK_TYPES.text [
            => '[\(orig_name)](\(link))'
        ]
        ]
    ]
    link_manager.symbols.(name) = link
    link null == ? [
        name @su.to_lower = name
        (name 'nst' @su.starts_with) (name '_nst' @su.starts_with) || ? [
            "'\(orig_name)' could be misspelled" @warning
        ]
        => '`\(orig_name)`'
    ]

    orig_name ' ' '[docs:nbsp]' @su.replace = orig_name
    => '[`\(orig_name)`](\(link))'
]

-/ ============================= C API Parsing ============================= /-

#parse_c_api [
    !('../include/' @fs.is_dir) ? [
        'current working directory is not nest/tools/' @fatal
        => null
    ]

    @link_manager_new = link_manager

    {} = files

    ... '../include/' @fs.list_dir := file [
        'Parsing \(file @fs.path.filename @su.repr)' @io.println
        file @_parse_c_file = file_blocks
        file_blocks null == ? [
            '\(file @su.repr) failed' @io.println
            ..
        ]
        link_manager file_blocks @link_manager_add_symbols
        file_blocks = files.(file)
    ]
    'Parsing complete.\n' @io.println
    link_manager @link_manager_expand_internal_links
    => {files, link_manager}
]

#_file_blocks_map file_header [
    => {
        'header': file_header,
        'symbols': <{}>,
        'raw_blocks': <{}>,
        'link_info': <{}>
    }
]

#_parse_c_file file_path [
    file_path @io.open = file
    file @io.read = content
    file @io.close
    content @_split_lines = lines

    content '/* [docs:ignore_file] */' @su.starts_with ? => null

    file_path @fs.path.filename lines @parser_new = parser

    @_file_info_map = file_header
    parser file_header @get_next_doc_block = file_header
    file_header null == ? => null
    !file_header.file ? [
        'missing file header' parser @fatal
        => null
    ]

    file_header @_file_blocks_map = file_blocks
    file_blocks.header.file.0 = header_name

    header_name (file_path @fs.path.filename) != ? [
        'file name in header \(header_name @su.repr) does not correspond ' \
            'to the name of the file' >< parser @warning
    ]

    ?.. parser @get_next_doc_block = block [
        |> block._type [
          ? BLOCK_MAP_TYPES.link_info [
            block.link_type LINK_TYPES.error != ?
                file_blocks.link_info block +
        ] ? BLOCK_MAP_TYPES.raw_block [
            file_blocks.raw_blocks block +
        ] ? BLOCK_MAP_TYPES.sym_info [
            parser @get_symbol_data = symbol_data
            symbol_data null != ?
                file_blocks.symbols {'doc': block, 'sym': symbol_data} +
        ] ? [
            'invalid block type \(block._type)' parser @error
        ]
        ]
    ]

    => parser.fatal_error ? null : file_blocks
]

#_split_lines content [
    content '\r\n' '\n' @su.replace '\r' '\n' @su.replace = content
    => content '\n' @su.lsplit
]

-/ ============================= C API Writing ============================= /-

#write_c_api files link_manager [
    !('../docs/' @fs.is_dir) ? [
        'current working directory is not nest/tools/' @fatal
        => null
    ]
    '../docs/c_api/' @fs.make_dir
    @sys.get_cwd = old_cwd
    '../docs/c_api/' @sys.set_cwd

    ... files := {file, file_blocks} [
        'Writing \(file @fs.path.filename @su.repr) documentation...' \
            @io.println
        file_blocks link_manager @_write_c_file
    ]

    'Writing API reference...' @io.println
    link_manager @_write_api_reference
    'Writing complete.' @io.println
    old_cwd @sys.set_cwd
]

#_write_c_file file_blocks lm [
    file_blocks.header.file.0 = file_name

    file_blocks.header.brief ?
        file_blocks.header.brief.0 = file_description

    !file_description ?
        'No description' = file_description

    file_blocks.header.author ? [
        file_blocks.header.author.0 = file_authors
    ]

    !file_authors ?
        'No authors.' = file_authors

    file_description.-1 '.' != ? '.' ><= file_description

    'c_api-' (file_name '.' @su.lsplit).0 '.md' >< 'w' @io.open = file

    file ('`' file_name '`' >< 1 @title) @io.write
    file_description lm @_doc_paragraph file @_append_to_file
    'Authors' 2 @title file @_append_to_file
    file_authors lm @_doc_paragraph file @_append_to_file

    ... file_blocks.raw_blocks := raw_block [
        raw_block.raw file @_append_to_file
    ]

    file_blocks.symbols @_split_categories = categories

    ... categories := {name, symbols} [
        file name symbols lm @_write_category
    ]

    file @io.close
]

#_append_to_file text file lm [
    file ('\n' text ><) @io.write
]

#_add_links text lm [
    '' = linked_text

    0 = idx
    0 = prev_end

    ?.. text '`' idx @su.lfind 1 + = idx [
        idx 1 - = start
        text '`' idx @su.lfind = idx
        idx -1 == ? ;
        idx = end
        1 += idx
        text (start 1 +) end @sequ.slice = link_text
        lm link_text @link_manager_get_link = link_text

        text prev_end start @sequ.slice ><= linked_text
        link_text ><= linked_text
        end 1 + = prev_end
    ]

    prev_end 1 + $linked_text != ?
        text prev_end @sequ.slice ><= linked_text

    => linked_text
]

#_doc_paragraph text lm [
    text lm @_add_links = text
    text 'WINDOWS ONLY' '**WINDOWS ONLY**' @su.replace = text

    text '\n' <.> ? [
        text '\n' @su.lsplit = items
        items.0 @paragraph = introduction
        items 1 @sequ.slice @list = list_str
        => introduction '\n' list_str ><
    ]
    text 'Warning:' @su.starts_with ? [
        text 'Warning:' @su.lremove @su.trim = text
        text ? [
            (text.0 @su.to_upper) (text 1 @sequ.slice) >< = text
        ]
        => text @warning_box
    ]
    text 'Note:' @su.starts_with ? [
        text 'Note:' @su.lremove @su.trim = text
        text ? [
            (text.0 @su.to_upper) (text 1 @sequ.slice) >< = text
        ]
        => text @note_box
    ]
    => text @paragraph
]

#_doc_list items lm [
    <{}> = new_items

    ... items := item [
        new_items (item lm @_add_links) +
    ]
    => new_items @list
]

#_split_categories symbols [
    {
        'Macros': <{}>,
        'Unions': <{}>,
        'Structs': <{}>,
        'Type aliases': <{}>,
        'Functions': <{}>,
        'Enums': <{}>
    } = categories

    ... symbols := symbol [
        |> symbol.sym.type [
          ? SYMBOL_TYPES.macro [
            categories.'Macros' symbol +
        ] ? SYMBOL_TYPES.union [
            ..
        ] ? SYMBOL_TYPES.r_union [
            categories.'Unions' symbol +
        ] ? SYMBOL_TYPES.struct [
            ..
        ] ? SYMBOL_TYPES.r_struct [
            categories.'Structs' symbol +
        ] ? SYMBOL_TYPES.typedef [
            ..
        ] ? SYMBOL_TYPES.t_func [
            categories.'Type aliases' symbol +
        ] ? SYMBOL_TYPES.function [
            categories.'Functions' symbol +
        ] ? SYMBOL_TYPES.enum [
            ..
        ] ? SYMBOL_TYPES.r_enum [
            categories.'Enums' symbol +
        ]
        ]
    ]

    => categories
]

#_write_category file name symbols lm [
    !symbols ? =>

    @hr file @_append_to_file
    name 2 @title file @_append_to_file

    ... symbols @itu.enumerate := {i, symbol} [
        file symbol i lm @write_symbol_doc
    ]
]

#write_symbol_doc file symbol i lm [
    i 0 != ?
        @hr file @_append_to_file

    '`' symbol.sym.name '`' >< 3 @title file @_append_to_file

    symbol.sym.synopsis ? [
        'Synopsis' 0 @title file @_append_to_file
        symbol.sym.synopsis 'better-c' @code_block file @_append_to_file
    ]

    symbol.doc = doc
    $doc.(null) $doc.brief + 0 != ? [
        'Description' 0 @title file @_append_to_file
        ... doc.(null) := desc [
            desc lm @_doc_paragraph file @_append_to_file
        ]
        ... doc.brief := desc [
            desc lm @_doc_paragraph file @_append_to_file
        ]
    ]

    $doc.param 0 != ? [
        |> symbol.sym.type [
          ? SYMBOL_TYPES.union [
            ..
        ] ? SYMBOL_TYPES.r_union [
            ..
        ] ? SYMBOL_TYPES.enum [
            ..
        ] ? SYMBOL_TYPES.r_enum [
            'Variants' = title_name
        ] ? SYMBOL_TYPES.struct [
            ..
        ] ? SYMBOL_TYPES.r_struct [
            'Fields' = title_name
        ] ? [
            'Parameters' = title_name
        ]
        ]

        title_name 0 @title file @_append_to_file
        doc.param ##x [
            x ':' 1 @su.lsplit = {name, desc}
            => '`\(name @su.trim)`: \(desc @su.trim)'
        ] @sequ.map = params
        params lm @_doc_list file @_append_to_file
    ]

    $doc.return 0 != && ? [
        'Returns' 0 @title file @_append_to_file
        ... doc.return := ret [
            ret lm @_doc_paragraph file @_append_to_file
        ]
    ]
]

#_write_api_reference lm [
    'c_api_reference.md' 'w' @io.open = file

    file ('API Reference' 1 @title) @io.write

    Array :: lm.symbols \
        _sort_mapping_func @sequ.sort \
        (## x => '[`\(x.0)`](\(x.1))') true @sequ.map \
    = symbols

    symbols @list file @_append_to_file
    file @io.close
]

#_sort_mapping_func symbol [
    symbol = {name, link}
    name '_' @su.replace @su.to_lower = name
    !(name 'nst' @su.starts_with) ? => '__' name ><
    => name
]

-/ ============================= Main program ============================== /-

#main [
    @parse_c_api *@write_c_api
]

@main
