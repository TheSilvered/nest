%YAML 1.2
---
name: Nest
scope: source.nest

file_extensions:
  - nest

variables:
  # number regex
  dec_digits: '\d[\d_]*'
  dec_ltrl: '{{dec_digits}}[bB]?'
  real_ltrl: '{{dec_digits}}\.{{dec_digits}}([eE][+-]?{{dec_digits}})?'
  real_illegal: '{{dec_digits}}\.{{dec_digits}}[eE][+-]?[^-+0-9]'

  oct_digits: '[0-7][0-7_]*'
  oct_ltrl: '0[oO]{{oct_digits}}([bB]|(?!\d))'
  oct_illegal: '0[oO]({{oct_digits}}[89]|[^0-7]|[89])'

  bin_digits: '[01][01_]*'
  bin_ltrl: '0[bB]{{bin_digits}}([bB]|(?!\d))'
  bin_illegal: '0[bB]({{bin_digits}}[2-9]|[2-9])'

  hex_digits: '[0-9a-fA-F][0-9a-fA-F_]*'
  hex_ltrl: '0[xXhH]{{hex_digits}}(?![g-zG-Z])'
  hex_illegal: '0[xXhH]({{hex_digits}}[g-zG-Z]|[^0-9a-fA-F]|[g-zG-Z])'

  num_ltrl: '[+-]?({{bin_ltrl}}|{{oct_ltrl}}|{{hex_ltrl}}|{{real_ltrl}}|{{dec_ltrl}})'
  illegal_num_literals: '({{real_illegal}}|{{hex_illegal}}|{{oct_illegal}}|{{bin_illegal}})'

  identifier: '[A-Za-z_][A-Za-z0-9_]*'
  constant: '([A-Z][A-Z0-9_]*\b|_+\d*[A-Z][A-Z0-9_]*\b)'
  lang_constants: '\b(true|false|null|_cwd_|_args_|_vars_|_globals_)\b'
  lang_types: '\b(Type|Int|Real|Bool|Null|Str|Array|Vector|Map|Func|Iter|Byte|IOfile)\b'
  lang_keywords: '(\?\.\.|\.\.\?|\.\.\.|\?\?|\?!|\?|:=|\.\.|;)'
  lang_arith_operators: '(-:|\+|-|\*|/|//|\^|%|><)'
  lang_logic_operators: '(!=|==|>=|<=|&&|\|\||&\|)'
  lang_other_operators: '(!!|\$|::|\?::|!|>>>|<<<|>>|<<|\||&|\^\^|~)'
  lang_assign_operators: '(\+=|-=|\*=|/=|//=|\^=|%=|><=|=|\|#\|)'

contexts:
  main:
    - include: first-line
    - include: body

  first-line:
    - match: '^--\$'
      scope: comment.line.nest
      push: first-line-body
    - match: ''
      push: body

  first-line-body:
    - match: '--no-default|-O[0-3]|--cp1252'
      scope: constant.language.nest
    - match: '[^\n]'
      scope: comment.line.nest
    - match: \r?\n
      push: body

  body:
    - include: strings
    - include: comment
    - include: keywords
    - include: soft-keywords
    - include: func-def
    - include: func-call
    - include: builtins
    - include: values
    - include: general

  strings:
    - match: '(?<=\|#\|)\s*(")(__C__:)'
      captures:
        1: punctuation.definition.string.begin.nest
        2: constant.character.escape.nest
      push: string_double

    - match: '(?<=\|#\|)\s*('')(__C__:)'
      captures:
        1: punctuation.definition.string.begin.nest
        2: constant.character.escape.nest
      push: string_single

    - match: '"'
      scope: punctuation.definition.string.begin.nest
      push: string_double

    - match: "'"
      scope: punctuation.definition.string.begin.nest
      push: string_single

  values:
    - match: '(<\{|{)'
      push: arr-obj-vect

    - match: '{{constant}}'
      scope: constant.language.nest

    - match: '(?<=[^.]\.)\s*({{identifier}})'
      scope: text.nest
      captures:
        1: variable.language.nest

    - match: '{{identifier}}'
      scope: variable.other.nest

    - match: '{{illegal_num_literals}}'
      scope: invalid.illegal.nest

    - match: '{{num_ltrl}}'
      scope: constant.numeric.nest

    - match: '##'
      scope: keyword.declaration.function.nest
      push: func-args

  comment:
    - match: '(-->|--+)'
      scope: comment.line.nest
      push: comment_end
    - match: '-/'
      scope: comment.block.nest
      push: multiline_comment_end

  keywords:
    - match: =>
      scope: keyword.control.nest

    - match: '\|>'
      scope: keyword.control.nest

    - include: operators

    - match: '{{lang_keywords}}'
      scope: keyword.control.nest

    - match: \.
      scope: punctuation.accessor.nest

  soft-keywords:
    - match: ':'
      scope: keyword.control.nest

  operators:
    - match: ->
      scope: keyword.operator.nest

    - match: '{{lang_logic_operators}}'
      scope: keyword.operator.logical.nest

    - match: '{{lang_assign_operators}}'
      scope: keyword.operator.assignment.nest

    - match: '{{lang_arith_operators}}'
      scope: keyword.operator.arithmetic.nest

    - match: '{{lang_other_operators}}'
      scope: keyword.operator.nest

    - match: '(<(?!\{)|(?<!\})>)'
      scope: keyword.operator.logical.nest

  func-call:
    - match: '(@@|@)(\s*{{identifier}}((\s*\.)\s*{{identifier}})*|(?=\s*##))'
      scope: variable.function.nest
      captures:
        1: keyword.operator.nest
        4: punctuation.accessor.nest

  general:
    - match: ']'
      scope: punctuation.section.block.end.nest

  builtins:
    - match: '{{lang_constants}}'
      scope: constant.language.nest

    - match: '{{lang_types}}'
      scope: storage.type.nest

  func-def:
    - match: '#\s*({{identifier}})'
      scope: keyword.declaration.function.nest
      captures:
        1: entity.name.function.nest
      push: func-args

  string_escape:
    - match: '\\([abefnrtv\\"'']|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{1,3})'
      scope: constant.character.escape.nest
    - match: '\\(x[^0-9a-fA-F].|x[0-9a-fA-F][^0-9a-fA-F]|[^abfnrtv\\"''])'
      scope: invalid.illegal.nest

  string_double:
    - meta_scope: string.quoted.double.nest
    - include: string_escape
    - match: '"'
      scope: punctuation.definition.string.end.nest
      pop: true

  string_single:
    - meta_scope: string.quoted.single.nest
    - include: string_escape
    - match: '(''|$)'
      scope: punctuation.definition.string.end.nest
      pop: true

  comment_end:
    - meta_scope: comment.line.nest
    - match: '\\\r?\n'
    - match: '\n'
      pop: true

  multiline_comment_end:
    - meta_scope: comment.block.nest
    - match: '/-'
      pop: true

  func-args:
    - match: '{{identifier}}'
      scope: variable.parameter.nest
    - match: '[ \t]*'
      scope: text.nest
    - match: '\['
      scope: punctuation.section.block.begin.nest
      pop: true
    - match: '=>'
      scope: keyword.control.nest
      pop: true
    - match: .
      scope: invalid.illegal.nest

  arr-obj-vect:
    - include: strings
    - include: comment
    - include: operators
    - include: func-call
    - include: builtins
    - include: values

    - match: '[,:;]'
      scope: punctuation.separator.nest

    - match: '(\}|\}>)'
      pop: true
