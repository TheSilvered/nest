{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Nest",
	"scopeName": "source.nest",
	"fileTypes": [""],
	"patterns": [
		{ "include": "#first-line" },
		{ "include": "#body" }
	],
	"repository": {
		"first-line": {
			"name": "comment.line.args.nest",
			"begin": "^--\\$",
			"end": "\\r?\\n",
			"patterns": [
				{ "include": "#first-line-body" }
			]
		},
		"first-line-body": {
			"name": "constant.language.nest",
			"match": "--no-default|-O[0-3]|--cp1252"
		},
		"body": {
			"patterns": [
				{ "include": "#strings" },
				{ "include": "#comment" },
				{ "include": "#keywords" },
				{ "include": "#soft-keywords" },
				{ "include": "#func-def" },
				{ "include": "#func-call" },
				{ "include": "#builtins" },
				{ "include": "#values" },
				{ "include": "#general" }
			]
		},
		"strings": {
			"patterns": [
				{ "include": "#str-double" },
				{ "include": "#str-single" },
				{ "include": "#str-raw" }
			]
		},
		"str-double": {
			"name": "string.quoted.double.nest",
			"begin": "((?<=\\|#\\|)\\s*(\")(__C__:))|(\")",
			"beginCaptures": {
				"2": { "name": "string.quoted.double.nest" },
				"3": { "name": "constant.character.escape.nest" },
				"4": { "name": "string.quoted.double.nest" }
			},
			"end": "\"",
			"patterns": [
				{ "include": "#string-escapes" }
			]
		},
		"str-single": {
			"name": "string.quoted.single.nest",
			"begin": "((?<=\\|#\\|)\\s*(')(__C__:))|(')",
			"beginCaptures": {
				"2": { "name": "string.quoted.single.nest" },
				"3": { "name": "constant.character.escape.nest" },
				"4": { "name": "string.quoted.single.nest" }
			},
			"end": "('|\\r?\\n)",
			"patterns": [
				{ "include": "#string-escapes" }
			]
		},
		"str-raw": {
			"name": "string.quoted.single.nest",
			"begin": "((?<=\\|#\\|)\\s*(`)(__C__:))|(`)",
			"beginCaptures": {
				"2": { "name": "string.quoted.single.nest" },
				"3": { "name": "constant.character.escape.nest" },
				"4": { "name": "string.quoted.single.nest" }
			},
			"end": "(?<!`)`",
			"patterns": [
				{
					"name": "constant.character.escape.nest",
					"match": "``"
				}
			]
		},
		"string-escapes": {
			"patterns": [
				{
					"name": "constant.character.escape.nest",
					"match": "\\\\([abefnrtv\\\\\"']|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{6}|[0-7]{1,3})"
				},
				{
					"name": "constant.character.escape.nest",
					"begin": "\\\\\\(",
					"end": "\\)",
					"patterns": [
						{ "include": "#body" },
						{ "include": "#string-expr" }
					]
				}
			]
		},
		"string-expr": {
			"name": "constant.character.escape.nest",
			"begin": "\\(",
			"end": "\\)",
			"patterns": [
				{ "include": "#body" }
			]
		},
		"comment": {
			"patterns": [
				{ "include": "#line-comment" },
				{ "include": "#block-comment" }
			]
		},
		"line-comment": {
			"name": "comment.line.double-dash.nest",
			"begin": "--",
			"end": "(?<!\\\\)\\r?\\n"
		},
		"block-comment": {
			"name": "comment.block.nest",
			"begin": "-/",
			"end": "/-"
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.nest",
					"match": "=>"
				},
				{
					"name": "keyword.control.nest",
					"match": "\\|>"
				},
				{ "include": "#operators" },
				{
					"name": "keyword.control.nest",
					"match": "(\\?\\.\\.|\\.\\.\\?|\\.\\.\\.|\\?|:=|\\.\\.|;)"
				},
				{
					"name": "punctuation.accessor.nest",
					"match": "\\."
				}
			]
		},
		"soft-keywords": {
			"name": "keyword.control.nest",
			"match": ":"
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.nest",
					"match": "->"
				},
				{
					"name": "keyword.operator.nest",
					"match": "!=|==|>=|<=|&&|\\|\\||&\\||\\+=|-=|\\*=|/=|\\|=|&=|\\^=|%=|><=|=|\\|#\\||-:|\\+|-|\\*|/|/|\\^\\^|\\^|%|><|\\$|::|\\?::|!|>>>|<<<|>>|<<|<\\.>|\\||~|&|<(?!\\{)|(?<!\\})>"
				}
			]
		},
		"func-def": {
			"match": "^\\s*(#)\\s*([A-Za-z_][A-Za-z_0-9]*)\\s*(\\r?\\n)*(([A-Za-z_][A-Za-z_0-9]*\\s*(\\r?\\n)*)*)(=>)?",
			"captures": {
				"1": { "name": "keyword.other.nest" },
				"2": { "name": "entity.name.function.nest" },
				"4": { "name": "variable.parameter.nest" },
				"7": { "name": "keyword.control.nest" }
			}
		},
		"func-call": {
			"name": "variable.function.nest",
			"match": "(@@|@)(\\s*[A-Za-z_][A-Za-z_0-9]*((\\s*\\.)\\s*[A-Za-z_][A-Za-z_0-9]*)*|(?=\\s*##))",
			"captures": {
				"1": { "name": "keyword.operator.nest" },
				"4": { "name": "punctuation.accessor.nest" }
			}
		},
		"builtins": {
			"patterns": [
				{
					"name": "constant.language.nest",
					"match": "\\b(true|false|null|_args_|_vars_|_globals_|_debug_|_debug_arch_)\\b"
				},
				{
					"name": "storage.type.nest",
					"match": "\\b(Type|Int|Real|Bool|Null|Str|Array|Vector|Map|Func|Iter|Byte|IOFile)\\b"
				}
			]
		},
		"values": {
			"patterns": [
				{ "include": "#arr-map" },
				{ "include": "#vect" },
				{
					"name": "constant.language.nest",
					"match": "([A-Z][A-Z0-9_]*\\b|_+\\d*[A-Z][A-Z0-9_]*\\b)"
				},
				{
					"name": "variable.language.nest",
					"match": "(?<=[^.]\\.)\\s*([A-Za-z_][A-Za-z_0-9]*)"
				},
				{
					"name": "variable.other.nest",
					"match": "[A-Za-z_][A-Za-z_0-9]*"
				},
				{
					"name": "constant.numeric.nest",
					"match": "[+-]?(0[bB][01][01_]*([bB]|(?!\\d))|0[oO][0-7][0-7_]*([bB]|(?!\\d))|0[xXhH][0-9a-fA-F][0-9a-fA-F_]*(?![g-zG-Z])|\\d[\\d_]*\\.\\d[\\d_]*([eE][+-]?\\d[\\d_]*)?|\\d[\\d_]*[bB]?)"
				},
				{ "include": "#lambda" }
			]
		},
		"arr-map": {
			"begin": "{",
			"end": "}",
			"patterns": [
				{ "include": "#strings" },
				{ "include": "#comment" },
				{ "include": "#operators" },
				{ "include": "#func-call" },
				{ "include": "#builtins" },
				{ "include": "#values" },
				{
					"name": "punctuation.separator.nest",
					"match": "[,:;]"
				}
			]
		},
		"vect": {
			"begin": "<{",
			"end": "}>",
			"patterns": [
				{ "include": "#strings" },
				{ "include": "#comment" },
				{ "include": "#operators" },
				{ "include": "#func-call" },
				{ "include": "#builtins" },
				{ "include": "#values" },
				{
					"name": "punctuation.separator.nest",
					"match": "[,;]"
				}
			]
		},
		"lambda": {
			"match": "(##)(([A-Za-z_][A-Za-z_0-9]*\\s*(\\r?\\n)*)*)\\s*(=>)?",
			"captures": {
				"1": { "name": "keyword.other.nest" },
				"2": { "name": "variable.parameter.nest" },
				"5": { "name": "keyword.control.nest" }
			}
		}
	}
}
